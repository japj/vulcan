//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Dimension
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("Relationship")]
    [AstSchemaTypeBindingAttribute("AttributeRelationshipElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstAttributeRelationshipNode : VulcanEngine.IR.Ast.Dimension.AstDimensionNamedBaseNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Visible_BackingField;
        private bool _isVisibleExplicitlySet;

        private VulcanEngine.IR.Ast.Dimension.AstAttributeNode _parentAttribute;
        private bool __isNotFirstSet__parentAttribute;

        private VulcanEngine.IR.Ast.Dimension.AstAttributeNode _childAttribute;
        private bool __isNotFirstSet__childAttribute;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Dimension.RelationshipType RelationshipType_BackingField;
        private bool _isRelationshipTypeExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Dimension.CardinalityType Cardinality_BackingField;
        private bool _isCardinalityExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Dimension.OptionalityType Optionality_BackingField;
        private bool _isOptionalityExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDefaultValue(true)]
        [VulcanDescription(@"Specifies whether or not the parent element is visible. The default setting is True.")]
        [Browsable(true)]
        [AstXNameBinding("Visible", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean Visible
        {
            get { return Visible_BackingField; }
            set
            {
                if (Visible_BackingField != value)
                {
                    System.Boolean oldValue = Visible_BackingField;
                    Visible_BackingField = value;
                    VulcanOnPropertyChanged("Visible", oldValue, Visible_BackingField);
                    IsVisibleExplicitlySet = true;
                }
            }
        }

        public bool IsVisibleExplicitlySet
        {
            get { return _isVisibleExplicitlySet; }
            protected set
            {
                if (_isVisibleExplicitlySet != value)
                {
                    bool oldValue = _isVisibleExplicitlySet;
                    _isVisibleExplicitlySet = value;
                    VulcanOnPropertyChanged("IsVisibleExplicitlySet", oldValue, _isVisibleExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"Specifies the name of the parent attribute for the specified relationship.")]
        [Browsable(false)]
        [AstXNameBinding("ParentAttributeName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Dimension.AstAttributeNode ParentAttribute
        {
            get { return _parentAttribute; }
            set
            {
                if (_parentAttribute != value || !__isNotFirstSet__parentAttribute)
                {
                    __isNotFirstSet__parentAttribute = true;
                    if (_parentAttribute != null)
                    {
                        _parentAttribute.Unreference(this, "ParentAttribute");
                    }
                    VulcanEngine.IR.Ast.Dimension.AstAttributeNode oldValue = _parentAttribute;
                    _parentAttribute = value;
                    if (_parentAttribute != null)
                    {
                        _parentAttribute.Reference(this, "ParentAttribute");
                    }
                    VulcanOnPropertyChanged("ParentAttribute", oldValue, _parentAttribute);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"Specifies the name of the child attribute for the specified relationship.")]
        [Browsable(false)]
        [AstXNameBinding("ChildAttributeName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Dimension.AstAttributeNode ChildAttribute
        {
            get { return _childAttribute; }
            set
            {
                if (_childAttribute != value || !__isNotFirstSet__childAttribute)
                {
                    __isNotFirstSet__childAttribute = true;
                    if (_childAttribute != null)
                    {
                        _childAttribute.Unreference(this, "ChildAttribute");
                    }
                    VulcanEngine.IR.Ast.Dimension.AstAttributeNode oldValue = _childAttribute;
                    _childAttribute = value;
                    if (_childAttribute != null)
                    {
                        _childAttribute.Reference(this, "ChildAttribute");
                    }
                    VulcanOnPropertyChanged("ChildAttribute", oldValue, _childAttribute);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Dimension.RelationshipType.Flexible)]
        [VulcanDescription(@"Specifies the type of the attribute. A complete list of allowed types is available at http://msdn.microsoft.com/de-de/library/ms127023(SQL.90).aspx.")]
        [Browsable(true)]
        [AstXNameBinding("Type", ChildType.Attribute, DefaultValue = "Flexible")]
        public VulcanEngine.IR.Ast.Dimension.RelationshipType RelationshipType
        {
            get { return RelationshipType_BackingField; }
            set
            {
                if (RelationshipType_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Dimension.RelationshipType oldValue = RelationshipType_BackingField;
                    RelationshipType_BackingField = value;
                    VulcanOnPropertyChanged("RelationshipType", oldValue, RelationshipType_BackingField);
                    IsRelationshipTypeExplicitlySet = true;
                }
            }
        }

        public bool IsRelationshipTypeExplicitlySet
        {
            get { return _isRelationshipTypeExplicitlySet; }
            protected set
            {
                if (_isRelationshipTypeExplicitlySet != value)
                {
                    bool oldValue = _isRelationshipTypeExplicitlySet;
                    _isRelationshipTypeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsRelationshipTypeExplicitlySet", oldValue, _isRelationshipTypeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Dimension.CardinalityType.OneToMany)]
        [VulcanDescription(@"Specifies the cardinality of the relationship described by an AttributeRelationship or RegularMeasureGroupDimension. Allowed values are Many (indicating a many-to-one relationship) and One (indicating a one-to-one relationship).")]
        [Browsable(true)]
        [AstXNameBinding("Cardinality", ChildType.Attribute, DefaultValue = "OneToMany")]
        public VulcanEngine.IR.Ast.Dimension.CardinalityType Cardinality
        {
            get { return Cardinality_BackingField; }
            set
            {
                if (Cardinality_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Dimension.CardinalityType oldValue = Cardinality_BackingField;
                    Cardinality_BackingField = value;
                    VulcanOnPropertyChanged("Cardinality", oldValue, Cardinality_BackingField);
                    IsCardinalityExplicitlySet = true;
                }
            }
        }

        public bool IsCardinalityExplicitlySet
        {
            get { return _isCardinalityExplicitlySet; }
            protected set
            {
                if (_isCardinalityExplicitlySet != value)
                {
                    bool oldValue = _isCardinalityExplicitlySet;
                    _isCardinalityExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCardinalityExplicitlySet", oldValue, _isCardinalityExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Dimension.OptionalityType.Mandatory)]
        [VulcanDescription(@"Specifies whether relationships between members of the related attribute are Mandatory or Optional.")]
        [Browsable(true)]
        [AstXNameBinding("Optionality", ChildType.Attribute, DefaultValue = "Mandatory")]
        public VulcanEngine.IR.Ast.Dimension.OptionalityType Optionality
        {
            get { return Optionality_BackingField; }
            set
            {
                if (Optionality_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Dimension.OptionalityType oldValue = Optionality_BackingField;
                    Optionality_BackingField = value;
                    VulcanOnPropertyChanged("Optionality", oldValue, Optionality_BackingField);
                    IsOptionalityExplicitlySet = true;
                }
            }
        }

        public bool IsOptionalityExplicitlySet
        {
            get { return _isOptionalityExplicitlySet; }
            protected set
            {
                if (_isOptionalityExplicitlySet != value)
                {
                    bool oldValue = _isOptionalityExplicitlySet;
                    _isOptionalityExplicitlySet = value;
                    VulcanOnPropertyChanged("IsOptionalityExplicitlySet", oldValue, _isOptionalityExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods






        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            Visible_BackingField = true;
            RelationshipType_BackingField = VulcanEngine.IR.Ast.Dimension.RelationshipType.Flexible;
            Cardinality_BackingField = VulcanEngine.IR.Ast.Dimension.CardinalityType.OneToMany;
            Optionality_BackingField = VulcanEngine.IR.Ast.Dimension.OptionalityType.Mandatory;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());






            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstAttributeRelationshipNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstAttributeRelationshipNode)targetItem;
            castedTargetItem.Visible_BackingField = Visible_BackingField;

            if (_parentAttribute == null)
            {
                castedTargetItem._parentAttribute = null;
            }
            else if (cloneMapping.ContainsKey(_parentAttribute))
            {
                castedTargetItem._parentAttribute = (VulcanEngine.IR.Ast.Dimension.AstAttributeNode)cloneMapping[_parentAttribute];
            }
            else
            {
                castedTargetItem._parentAttribute = _parentAttribute;
            }

            if (_childAttribute == null)
            {
                castedTargetItem._childAttribute = null;
            }
            else if (cloneMapping.ContainsKey(_childAttribute))
            {
                castedTargetItem._childAttribute = (VulcanEngine.IR.Ast.Dimension.AstAttributeNode)cloneMapping[_childAttribute];
            }
            else
            {
                castedTargetItem._childAttribute = _childAttribute;
            }

            castedTargetItem.RelationshipType_BackingField = RelationshipType_BackingField;

            castedTargetItem.Cardinality_BackingField = Cardinality_BackingField;

            castedTargetItem.Optionality_BackingField = Optionality_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstAttributeRelationshipNode(parentItem);
        }

        #endregion Cloning Support


    }
}
