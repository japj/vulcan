//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast
{
    [AstDoNotEmitXmlSchemaTypeAttribute]
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public abstract partial class AstNode : VulcanNotifyPropertyChanged, IXObjectMappingProvider, IFrameworkItem
    {
        #region Private Storage
        private VulcanCollection<System.Xml.Linq.XObject> _unmappedXObjects;

        private VulcanCollection<VulcanEngine.IR.Ast.AstAnnotationNode> _annotations;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanDescription(@"")]
        [Browsable(false)]
        public VulcanCollection<System.Xml.Linq.XObject> UnmappedXObjects
        {
            get { return _unmappedXObjects; }
        }


        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Annotation", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.AstAnnotationNode> Annotations
        {
            get { return _annotations; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods
        private void _unmappedXObjects_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanOnCollectionPropertyChanged("UnmappedXObjects", e);
        }

        private void _annotations_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanOnCollectionPropertyChanged("Annotations", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            _unmappedXObjects = new VulcanCollection<System.Xml.Linq.XObject>();
            _unmappedXObjects.CollectionChanged += _unmappedXObjects_CollectionChanged;
            _annotations = new VulcanCollection<VulcanEngine.IR.Ast.AstAnnotationNode>();
            _annotations.CollectionChanged += _annotations_CollectionChanged;
        }

        #endregion Initialization

        public virtual VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();

            foreach (var item in _annotations)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public virtual IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public virtual IFrameworkItem Clone()
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public virtual IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public virtual IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public virtual IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public virtual void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            if (targetItem == null || !typeof(AstNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstNode)targetItem;
            castedTargetItem._unmappedXObjects = _unmappedXObjects;

            foreach (var item in _annotations)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._annotations.Add((VulcanEngine.IR.Ast.AstAnnotationNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public virtual IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        #endregion Cloning Support


        #region Special Framework Item Members

        private BimlFile _bimlFile;
        private XObjectMapping _boundXObject;
        private IFrameworkItem _parentItem;
   	    private IScopeBoundary _scopeBoundary;

        private ITemplateInstance _templateInstance;
        public ITemplateInstance TemplateInstance
        {
            get { return _templateInstance; }
            set
            {
                if (_templateInstance != value)
                {
                    ITemplateInstance oldValue = _templateInstance;
                    _templateInstance = value;
                    VulcanOnPropertyChanged("TemplateInstance", oldValue, _templateInstance);
                }
            }
        }

        [Browsable(false)]
        public BimlFile BimlFile
        {
            get { return _bimlFile; }
            set
            {
                if (_bimlFile != value)
                {
                    BimlFile oldValue = _bimlFile;
                    _bimlFile = value;
                    VulcanOnPropertyChanged("BimlFile", oldValue, _bimlFile);
                }
            }
        }
        
        [Browsable(false)]
        [AstUndoIneligibleProperty]
        public XObjectMapping BoundXObject
        {
            get { return _boundXObject; }
            set
            {
                if (_boundXObject != value)
                {
                    XObjectMapping oldValue = _boundXObject;
                    _boundXObject = value;
                    VulcanOnPropertyChanged("BoundXObject", oldValue, _boundXObject);
                }
            }
        }

        [Browsable(false)]
        public IFrameworkItem ParentItem
        {
            get { return _parentItem; }
            set
            {
                if (_parentItem != value)
                {
                    IFrameworkItem oldValue = _parentItem;
                    _parentItem = value;
                    VulcanOnPropertyChanged("ParentItem", oldValue, _parentItem);
                    ScopeBoundary = FirstParent<IScopeBoundary>();
                }
            }
        }

        [Browsable(false)]
        public IScopeBoundary ScopeBoundary
        {
            get { return _scopeBoundary; }
            private set
            {
                if (_scopeBoundary != value)
                {
                    IScopeBoundary oldValue = _scopeBoundary;
                    _scopeBoundary = value;
                    VulcanOnPropertyChanged("ScopeBoundary", oldValue, _scopeBoundary);
                }
            }
        }

        [Browsable(false)]
        public ISymbolTableProvider SymbolTableProvider
        {
            get { return FirstParent<ISymbolTableProvider>(); }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
        public TAstNode FirstParent<TAstNode>() where TAstNode : class
        {
            return ParentItem == null ? null : ParentItem.FirstThisOrParent<TAstNode>(null);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
        public TAstNode FirstParent<TAstNode>(Type attributeType) where TAstNode : class
        {
            return ParentItem == null ? null : ParentItem.FirstThisOrParent<TAstNode>(attributeType);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
        public TAstNode FirstThisOrParent<TAstNode>() where TAstNode : class
        {
            return FirstThisOrParent<TAstNode>(null);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
        public TAstNode FirstThisOrParent<TAstNode>(Type attributeType) where TAstNode : class
        {
            IFrameworkItem currentNode = this;
            while (currentNode != null)
            {
                var castedNode = currentNode as TAstNode;
                if (castedNode != null && (attributeType == null || CommonUtility.HasProperty(castedNode.GetType(), attributeType)))
                {
                    return castedNode;
                }

                currentNode = currentNode.ParentItem;
            }
            return null;
        }

        public IEnumerable<IFrameworkItem> AllDefinedSuccessors()
        {
            return new GraphEnumerable<IFrameworkItem, IFrameworkItem>(this, GraphSearchAlgorithm.DepthFirstSearch, (item => item.DefinedAstNodes()));
        }

        public void OnPropertyChanged(string propertyName)
        {
            PropertyInfo propertyInfo = GetType().GetProperty(propertyName);
            if (propertyInfo != null)
            {
                object propertyValue = propertyInfo.GetValue(this, null);
                VulcanOnPropertyChanged(propertyName, propertyValue, propertyValue);
            }
        }
        #endregion Special Framework Item Members

    }
}
