//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Table
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [AstDoNotEmitXmlSchemaTypeAttribute]
    [AstSchemaTypeBindingAttribute("TableReferenceBaseElemType", "http://tempuri.org/vulcan2.xsd")]
    public abstract partial class AstTableColumnTableReferenceBaseNode : VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String ForeignKeyNameOverride_BackingField;
        private bool _isForeignKeyNameOverrideExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean EnforceForeignKeyConstraint_BackingField;
        private bool _isEnforceForeignKeyConstraintExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [Browsable(true)]
        [AstXNameBinding("ForeignKeyNameOverride", ChildType.Attribute)]
        public System.String ForeignKeyNameOverride
        {
            get { return ForeignKeyNameOverride_BackingField; }
            set
            {
                if (ForeignKeyNameOverride_BackingField != value)
                {
                    System.String oldValue = ForeignKeyNameOverride_BackingField;
                    ForeignKeyNameOverride_BackingField = value;
                    VulcanOnPropertyChanged("ForeignKeyNameOverride", oldValue, ForeignKeyNameOverride_BackingField);
                    IsForeignKeyNameOverrideExplicitlySet = true;
                }
            }
        }

        public bool IsForeignKeyNameOverrideExplicitlySet
        {
            get { return _isForeignKeyNameOverrideExplicitlySet; }
            protected set
            {
                if (_isForeignKeyNameOverrideExplicitlySet != value)
                {
                    bool oldValue = _isForeignKeyNameOverrideExplicitlySet;
                    _isForeignKeyNameOverrideExplicitlySet = value;
                    VulcanOnPropertyChanged("IsForeignKeyNameOverrideExplicitlySet", oldValue, _isForeignKeyNameOverrideExplicitlySet);
                }
            }
        }


        [VulcanDefaultValue(true)]
        [Browsable(true)]
        [AstXNameBinding("EnforceForeignKeyConstraint", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean EnforceForeignKeyConstraint
        {
            get { return EnforceForeignKeyConstraint_BackingField; }
            set
            {
                if (EnforceForeignKeyConstraint_BackingField != value)
                {
                    System.Boolean oldValue = EnforceForeignKeyConstraint_BackingField;
                    EnforceForeignKeyConstraint_BackingField = value;
                    VulcanOnPropertyChanged("EnforceForeignKeyConstraint", oldValue, EnforceForeignKeyConstraint_BackingField);
                    IsEnforceForeignKeyConstraintExplicitlySet = true;
                }
            }
        }

        public bool IsEnforceForeignKeyConstraintExplicitlySet
        {
            get { return _isEnforceForeignKeyConstraintExplicitlySet; }
            protected set
            {
                if (_isEnforceForeignKeyConstraintExplicitlySet != value)
                {
                    bool oldValue = _isEnforceForeignKeyConstraintExplicitlySet;
                    _isEnforceForeignKeyConstraintExplicitlySet = value;
                    VulcanOnPropertyChanged("IsEnforceForeignKeyConstraintExplicitlySet", oldValue, _isEnforceForeignKeyConstraintExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods


        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            EnforceForeignKeyConstraint_BackingField = true;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());


            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTableColumnTableReferenceBaseNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTableColumnTableReferenceBaseNode)targetItem;
            castedTargetItem.ForeignKeyNameOverride_BackingField = ForeignKeyNameOverride_BackingField;

            castedTargetItem.EnforceForeignKeyConstraint_BackingField = EnforceForeignKeyConstraint_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        #endregion Cloning Support


    }
}
