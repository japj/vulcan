//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Table
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("CloneTable")]
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstTableCloneNode : VulcanEngine.IR.Ast.Table.AstTableNode
    {
        #region Private Storage
        private VulcanEngine.IR.Ast.Table.AstTableNode _table;
        private bool __isNotFirstSet__table;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean CloneKeys_BackingField;
        private bool _isCloneKeysExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean CloneIndexes_BackingField;
        private bool _isCloneIndexesExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean NullClonedColumns_BackingField;
        private bool _isNullClonedColumnsExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean CloneStaticSources_BackingField;
        private bool _isCloneStaticSourcesExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [AstRequiredProperty]
        [Browsable(true)]
        [AstXNameBinding("TableName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Table.AstTableNode Table
        {
            get { return _table; }
            set
            {
                if (_table != value || !__isNotFirstSet__table)
                {
                    __isNotFirstSet__table = true;
                    if (_table != null)
                    {
                        _table.Unreference(this, "Table");
                    }
                    VulcanEngine.IR.Ast.Table.AstTableNode oldValue = _table;
                    _table = value;
                    if (_table != null)
                    {
                        _table.Reference(this, "Table");
                    }
                    VulcanOnPropertyChanged("Table", oldValue, _table);
                }
            }
        }


        [VulcanDefaultValue(false)]
        [Browsable(true)]
        [AstXNameBinding("CloneKeys", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean CloneKeys
        {
            get { return CloneKeys_BackingField; }
            set
            {
                if (CloneKeys_BackingField != value)
                {
                    System.Boolean oldValue = CloneKeys_BackingField;
                    CloneKeys_BackingField = value;
                    VulcanOnPropertyChanged("CloneKeys", oldValue, CloneKeys_BackingField);
                    IsCloneKeysExplicitlySet = true;
                }
            }
        }

        public bool IsCloneKeysExplicitlySet
        {
            get { return _isCloneKeysExplicitlySet; }
            protected set
            {
                if (_isCloneKeysExplicitlySet != value)
                {
                    bool oldValue = _isCloneKeysExplicitlySet;
                    _isCloneKeysExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCloneKeysExplicitlySet", oldValue, _isCloneKeysExplicitlySet);
                }
            }
        }


        [VulcanDefaultValue(false)]
        [Browsable(true)]
        [AstXNameBinding("CloneIndexes", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean CloneIndexes
        {
            get { return CloneIndexes_BackingField; }
            set
            {
                if (CloneIndexes_BackingField != value)
                {
                    System.Boolean oldValue = CloneIndexes_BackingField;
                    CloneIndexes_BackingField = value;
                    VulcanOnPropertyChanged("CloneIndexes", oldValue, CloneIndexes_BackingField);
                    IsCloneIndexesExplicitlySet = true;
                }
            }
        }

        public bool IsCloneIndexesExplicitlySet
        {
            get { return _isCloneIndexesExplicitlySet; }
            protected set
            {
                if (_isCloneIndexesExplicitlySet != value)
                {
                    bool oldValue = _isCloneIndexesExplicitlySet;
                    _isCloneIndexesExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCloneIndexesExplicitlySet", oldValue, _isCloneIndexesExplicitlySet);
                }
            }
        }


        [VulcanDefaultValue(false)]
        [Browsable(true)]
        [AstXNameBinding("NullClonedColumns", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean NullClonedColumns
        {
            get { return NullClonedColumns_BackingField; }
            set
            {
                if (NullClonedColumns_BackingField != value)
                {
                    System.Boolean oldValue = NullClonedColumns_BackingField;
                    NullClonedColumns_BackingField = value;
                    VulcanOnPropertyChanged("NullClonedColumns", oldValue, NullClonedColumns_BackingField);
                    IsNullClonedColumnsExplicitlySet = true;
                }
            }
        }

        public bool IsNullClonedColumnsExplicitlySet
        {
            get { return _isNullClonedColumnsExplicitlySet; }
            protected set
            {
                if (_isNullClonedColumnsExplicitlySet != value)
                {
                    bool oldValue = _isNullClonedColumnsExplicitlySet;
                    _isNullClonedColumnsExplicitlySet = value;
                    VulcanOnPropertyChanged("IsNullClonedColumnsExplicitlySet", oldValue, _isNullClonedColumnsExplicitlySet);
                }
            }
        }


        [VulcanDefaultValue(false)]
        [Browsable(true)]
        [AstXNameBinding("CloneStaticSources", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean CloneStaticSources
        {
            get { return CloneStaticSources_BackingField; }
            set
            {
                if (CloneStaticSources_BackingField != value)
                {
                    System.Boolean oldValue = CloneStaticSources_BackingField;
                    CloneStaticSources_BackingField = value;
                    VulcanOnPropertyChanged("CloneStaticSources", oldValue, CloneStaticSources_BackingField);
                    IsCloneStaticSourcesExplicitlySet = true;
                }
            }
        }

        public bool IsCloneStaticSourcesExplicitlySet
        {
            get { return _isCloneStaticSourcesExplicitlySet; }
            protected set
            {
                if (_isCloneStaticSourcesExplicitlySet != value)
                {
                    bool oldValue = _isCloneStaticSourcesExplicitlySet;
                    _isCloneStaticSourcesExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCloneStaticSourcesExplicitlySet", oldValue, _isCloneStaticSourcesExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods





        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            CloneKeys_BackingField = false;
            CloneIndexes_BackingField = false;
            NullClonedColumns_BackingField = false;
            CloneStaticSources_BackingField = false;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());





            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTableCloneNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTableCloneNode)targetItem;
            if (_table == null)
            {
                castedTargetItem._table = null;
            }
            else if (cloneMapping.ContainsKey(_table))
            {
                castedTargetItem._table = (VulcanEngine.IR.Ast.Table.AstTableNode)cloneMapping[_table];
            }
            else
            {
                castedTargetItem._table = _table;
            }

            castedTargetItem.CloneKeys_BackingField = CloneKeys_BackingField;

            castedTargetItem.CloneIndexes_BackingField = CloneIndexes_BackingField;

            castedTargetItem.NullClonedColumns_BackingField = NullClonedColumns_BackingField;

            castedTargetItem.CloneStaticSources_BackingField = CloneStaticSources_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstTableCloneNode(parentItem);
        }

        #endregion Cloning Support


    }
}
