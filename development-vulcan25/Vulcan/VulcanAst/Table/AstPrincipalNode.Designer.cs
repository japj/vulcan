//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Table
{
    [FriendlyNameAttribute("Principal")]
    [AstSchemaTypeBindingAttribute("PrincipalElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstPrincipalNode : VulcanEngine.IR.Ast.AstNamedNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Table.PrincipalType PrincipalType_BackingField;
        private bool __isNotFirstSet_PrincipalType_BackingField;
        private bool _isPrincipalTypeExplicitlySet;

        private VulcanEngine.IR.Ast.Connection.AstConnectionNode _connection;
        private bool __isNotFirstSet__connection;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Emit_BackingField;
        private bool _isEmitExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("Type", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Table.PrincipalType PrincipalType
        {
            get { return PrincipalType_BackingField; }
            set
            {
                if (PrincipalType_BackingField != value || !__isNotFirstSet_PrincipalType_BackingField)
                {
                    __isNotFirstSet_PrincipalType_BackingField = true;
                    VulcanEngine.IR.Ast.Table.PrincipalType oldValue = PrincipalType_BackingField;
                    PrincipalType_BackingField = value;
                    VulcanOnPropertyChanged("PrincipalType", oldValue, PrincipalType_BackingField);
                    IsPrincipalTypeExplicitlySet = true;
                }
            }
        }

        public bool IsPrincipalTypeExplicitlySet
        {
            get { return _isPrincipalTypeExplicitlySet; }
            protected set
            {
                if (_isPrincipalTypeExplicitlySet != value)
                {
                    bool oldValue = _isPrincipalTypeExplicitlySet;
                    _isPrincipalTypeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsPrincipalTypeExplicitlySet", oldValue, _isPrincipalTypeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("ConnectionName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Connection.AstConnectionNode Connection
        {
            get { return _connection; }
            set
            {
                if (_connection != value || !__isNotFirstSet__connection)
                {
                    __isNotFirstSet__connection = true;
                    if (_connection != null)
                    {
                        _connection.Unreference(this, "Connection");
                    }
                    VulcanEngine.IR.Ast.Connection.AstConnectionNode oldValue = _connection;
                    _connection = value;
                    if (_connection != null)
                    {
                        _connection.Reference(this, "Connection");
                    }
                    VulcanOnPropertyChanged("Connection", oldValue, _connection);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(true)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("Emit", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean Emit
        {
            get { return Emit_BackingField; }
            set
            {
                if (Emit_BackingField != value)
                {
                    System.Boolean oldValue = Emit_BackingField;
                    Emit_BackingField = value;
                    VulcanOnPropertyChanged("Emit", oldValue, Emit_BackingField);
                    IsEmitExplicitlySet = true;
                }
            }
        }

        public bool IsEmitExplicitlySet
        {
            get { return _isEmitExplicitlySet; }
            protected set
            {
                if (_isEmitExplicitlySet != value)
                {
                    bool oldValue = _isEmitExplicitlySet;
                    _isEmitExplicitlySet = value;
                    VulcanOnPropertyChanged("IsEmitExplicitlySet", oldValue, _isEmitExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods



        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            Emit_BackingField = true;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());



            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstPrincipalNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstPrincipalNode)targetItem;
            castedTargetItem.PrincipalType_BackingField = PrincipalType_BackingField;

            if (_connection == null)
            {
                castedTargetItem._connection = null;
            }
            else if (cloneMapping.ContainsKey(_connection))
            {
                castedTargetItem._connection = (VulcanEngine.IR.Ast.Connection.AstConnectionNode)cloneMapping[_connection];
            }
            else
            {
                castedTargetItem._connection = _connection;
            }

            castedTargetItem.Emit_BackingField = Emit_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstPrincipalNode(parentItem);
        }

        #endregion Cloning Support


    }
}
