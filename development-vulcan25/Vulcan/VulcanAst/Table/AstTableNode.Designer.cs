//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Table
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("Table")]
    [AstSchemaTypeBindingAttribute("TableElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstTableNode : VulcanEngine.IR.Ast.Table.AstTableBaseNode
    {
        #region Private Storage
        private VulcanEngine.IR.Ast.Connection.AstConnectionNode _connection;
        private bool __isNotFirstSet__connection;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode> _columns;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableKeyBaseNode> _keys;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableSourceBaseNode> _sources;

        private VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstEtlFragmentNode> _lookups;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexNode> _indexes;

        private VulcanEngine.IR.Ast.Task.AstContainerTaskNode _customExtensions;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean LateArriving_BackingField;
        private bool _isLateArrivingExplicitlySet;

        private VulcanEngine.IR.Ast.Table.AstSchemaNode _schema;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Table.TableCompressionType CompressionType_BackingField;
        private bool _isCompressionTypeExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("ConnectionName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Connection.AstConnectionNode Connection
        {
            get { return _connection; }
            set
            {
                if (_connection != value || !__isNotFirstSet__connection)
                {
                    __isNotFirstSet__connection = true;
                    if (_connection != null)
                    {
                        _connection.Unreference(this, "Connection");
                    }
                    VulcanEngine.IR.Ast.Connection.AstConnectionNode oldValue = _connection;
                    _connection = value;
                    if (_connection != null)
                    {
                        _connection.Reference(this, "Connection");
                    }
                    VulcanOnPropertyChanged("Connection", oldValue, _connection);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Column", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableColumnNode))]
        [AstXNameBinding("TableReference", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableColumnTableReferenceNode))]
        [AstXNameBinding("HashedKey", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableHashedKeyColumnNode))]
        [AstXNameBinding("Dimension", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableColumnDimensionReferenceNode))]
        [AstXNameBinding("MultiColumnTableReference", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstMultipleColumnTableReferenceNode))]
        [AstXNameBinding("MultiColumnDimensionReference", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstMultipleColumnDimensionReferenceNode))]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode> Columns
        {
            get { return _columns; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Identity", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableIdentityNode))]
        [AstXNameBinding("PrimaryKey", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTablePrimaryKeyNode))]
        [AstXNameBinding("UniqueKey", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableUniqueKeyNode))]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableKeyBaseNode> Keys
        {
            get { return _keys; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("StaticSource", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableStaticSourceNode))]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableSourceBaseNode> Sources
        {
            get { return _sources; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Lookup", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstEtlFragmentNode> Lookups
        {
            get { return _lookups; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Index", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexNode> Indexes
        {
            get { return _indexes; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("CustomExtensions", ChildType.ChildDefinition)]
        public VulcanEngine.IR.Ast.Task.AstContainerTaskNode CustomExtensions
        {
            get { return _customExtensions; }
            set
            {
                if (_customExtensions != value)
                {
                    if (_customExtensions != null)
                    {
                        _customExtensions.Undefine();
                    }
                    VulcanEngine.IR.Ast.Task.AstContainerTaskNode oldValue = _customExtensions;
                    _customExtensions = value;
                    if (_customExtensions != null)
                    {
                        _customExtensions.DefineSymbol();
                    }
                    VulcanOnPropertyChanged("CustomExtensions", oldValue, _customExtensions);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("LateArriving", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean LateArriving
        {
            get { return LateArriving_BackingField; }
            set
            {
                if (LateArriving_BackingField != value)
                {
                    System.Boolean oldValue = LateArriving_BackingField;
                    LateArriving_BackingField = value;
                    VulcanOnPropertyChanged("LateArriving", oldValue, LateArriving_BackingField);
                    IsLateArrivingExplicitlySet = true;
                }
            }
        }

        public bool IsLateArrivingExplicitlySet
        {
            get { return _isLateArrivingExplicitlySet; }
            protected set
            {
                if (_isLateArrivingExplicitlySet != value)
                {
                    bool oldValue = _isLateArrivingExplicitlySet;
                    _isLateArrivingExplicitlySet = value;
                    VulcanOnPropertyChanged("IsLateArrivingExplicitlySet", oldValue, _isLateArrivingExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("SchemaName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Table.AstSchemaNode Schema
        {
            get { return _schema; }
            set
            {
                if (_schema != value)
                {
                    if (_schema != null)
                    {
                        _schema.Unreference(this, "Schema");
                    }
                    VulcanEngine.IR.Ast.Table.AstSchemaNode oldValue = _schema;
                    _schema = value;
                    if (_schema != null)
                    {
                        _schema.Reference(this, "Schema");
                    }
                    VulcanOnPropertyChanged("Schema", oldValue, _schema);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Table.TableCompressionType.None)]
        [Browsable(true)]
        [AstXNameBinding("CompressionType", ChildType.Attribute, DefaultValue = "None")]
        public VulcanEngine.IR.Ast.Table.TableCompressionType CompressionType
        {
            get { return CompressionType_BackingField; }
            set
            {
                if (CompressionType_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Table.TableCompressionType oldValue = CompressionType_BackingField;
                    CompressionType_BackingField = value;
                    VulcanOnPropertyChanged("CompressionType", oldValue, CompressionType_BackingField);
                    IsCompressionTypeExplicitlySet = true;
                }
            }
        }

        public bool IsCompressionTypeExplicitlySet
        {
            get { return _isCompressionTypeExplicitlySet; }
            protected set
            {
                if (_isCompressionTypeExplicitlySet != value)
                {
                    bool oldValue = _isCompressionTypeExplicitlySet;
                    _isCompressionTypeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCompressionTypeExplicitlySet", oldValue, _isCompressionTypeExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods

        private void _columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Columns", e);
        }

        private void _keys_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstTableKeyBaseNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Keys", e);
        }

        private void _sources_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstTableSourceBaseNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Sources", e);
        }

        private void _lookups_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Transformation.AstEtlFragmentNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Lookups", e);
        }

        private void _indexes_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstTableIndexNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Indexes", e);
        }





        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            _columns = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode>();
            _columns.CollectionChanged += _columns_CollectionChanged;
            _keys = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableKeyBaseNode>();
            _keys.CollectionChanged += _keys_CollectionChanged;
            _sources = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableSourceBaseNode>();
            _sources.CollectionChanged += _sources_CollectionChanged;
            _lookups = new VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstEtlFragmentNode>();
            _lookups.CollectionChanged += _lookups_CollectionChanged;
            _indexes = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexNode>();
            _indexes.CollectionChanged += _indexes_CollectionChanged;
            LateArriving_BackingField = false;
            CompressionType_BackingField = VulcanEngine.IR.Ast.Table.TableCompressionType.None;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());

            foreach (var item in _columns)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _keys)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _sources)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _lookups)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _indexes)
            {
                definedAstNodes.Add(item);
            }

            if (_customExtensions != null)
            {
                definedAstNodes.Add(_customExtensions);
            }




            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTableNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTableNode)targetItem;
            if (_connection == null)
            {
                castedTargetItem._connection = null;
            }
            else if (cloneMapping.ContainsKey(_connection))
            {
                castedTargetItem._connection = (VulcanEngine.IR.Ast.Connection.AstConnectionNode)cloneMapping[_connection];
            }
            else
            {
                castedTargetItem._connection = _connection;
            }

            foreach (var item in _columns)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._columns.Add((VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _keys)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._keys.Add((VulcanEngine.IR.Ast.Table.AstTableKeyBaseNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _sources)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._sources.Add((VulcanEngine.IR.Ast.Table.AstTableSourceBaseNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _lookups)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._lookups.Add((VulcanEngine.IR.Ast.Transformation.AstEtlFragmentNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _indexes)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._indexes.Add((VulcanEngine.IR.Ast.Table.AstTableIndexNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            if (_customExtensions == null)
            {
                castedTargetItem._customExtensions = null;
            }
            else if (cloneMapping.ContainsKey(_customExtensions))
            {
                castedTargetItem._customExtensions = (VulcanEngine.IR.Ast.Task.AstContainerTaskNode)cloneMapping[_customExtensions];
                _customExtensions.CloneInto(cloneMapping[_customExtensions], cloneMapping);
            }
            else
            {
                castedTargetItem._customExtensions = _customExtensions;
            }

            castedTargetItem.LateArriving_BackingField = LateArriving_BackingField;

            if (_schema == null)
            {
                castedTargetItem._schema = null;
            }
            else if (cloneMapping.ContainsKey(_schema))
            {
                castedTargetItem._schema = (VulcanEngine.IR.Ast.Table.AstSchemaNode)cloneMapping[_schema];
            }
            else
            {
                castedTargetItem._schema = _schema;
            }

            castedTargetItem.CompressionType_BackingField = CompressionType_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstTableNode(parentItem);
        }

        #endregion Cloning Support


    }
}
