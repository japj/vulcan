//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Table
{
    [FriendlyNameAttribute("Index")]
    [AstSchemaTypeBindingAttribute("TableIndexElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstTableIndexNode : VulcanEngine.IR.Ast.AstNamedNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean PadIndex_BackingField;
        private bool _isPadIndexExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean SortInTempDB_BackingField;
        private bool _isSortInTempDBExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean DropExisting_BackingField;
        private bool _isDropExistingExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean IgnoreDupKey_BackingField;
        private bool _isIgnoreDupKeyExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Online_BackingField;
        private bool _isOnlineExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Clustered_BackingField;
        private bool _isClusteredExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Unique_BackingField;
        private bool _isUniqueExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexColumnNode> _columns;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexLeafNode> _leafs;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies PadIndex.")]
        [Browsable(true)]
        [AstXNameBinding("PadIndex", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean PadIndex
        {
            get { return PadIndex_BackingField; }
            set
            {
                if (PadIndex_BackingField != value)
                {
                    System.Boolean oldValue = PadIndex_BackingField;
                    PadIndex_BackingField = value;
                    VulcanOnPropertyChanged("PadIndex", oldValue, PadIndex_BackingField);
                    IsPadIndexExplicitlySet = true;
                }
            }
        }

        public bool IsPadIndexExplicitlySet
        {
            get { return _isPadIndexExplicitlySet; }
            protected set
            {
                if (_isPadIndexExplicitlySet != value)
                {
                    bool oldValue = _isPadIndexExplicitlySet;
                    _isPadIndexExplicitlySet = value;
                    VulcanOnPropertyChanged("IsPadIndexExplicitlySet", oldValue, _isPadIndexExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies SortInTempDB.")]
        [Browsable(true)]
        [AstXNameBinding("SortInTempdb", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean SortInTempDB
        {
            get { return SortInTempDB_BackingField; }
            set
            {
                if (SortInTempDB_BackingField != value)
                {
                    System.Boolean oldValue = SortInTempDB_BackingField;
                    SortInTempDB_BackingField = value;
                    VulcanOnPropertyChanged("SortInTempDB", oldValue, SortInTempDB_BackingField);
                    IsSortInTempDBExplicitlySet = true;
                }
            }
        }

        public bool IsSortInTempDBExplicitlySet
        {
            get { return _isSortInTempDBExplicitlySet; }
            protected set
            {
                if (_isSortInTempDBExplicitlySet != value)
                {
                    bool oldValue = _isSortInTempDBExplicitlySet;
                    _isSortInTempDBExplicitlySet = value;
                    VulcanOnPropertyChanged("IsSortInTempDBExplicitlySet", oldValue, _isSortInTempDBExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies DropExisting.")]
        [Browsable(true)]
        [AstXNameBinding("DropExisting", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean DropExisting
        {
            get { return DropExisting_BackingField; }
            set
            {
                if (DropExisting_BackingField != value)
                {
                    System.Boolean oldValue = DropExisting_BackingField;
                    DropExisting_BackingField = value;
                    VulcanOnPropertyChanged("DropExisting", oldValue, DropExisting_BackingField);
                    IsDropExistingExplicitlySet = true;
                }
            }
        }

        public bool IsDropExistingExplicitlySet
        {
            get { return _isDropExistingExplicitlySet; }
            protected set
            {
                if (_isDropExistingExplicitlySet != value)
                {
                    bool oldValue = _isDropExistingExplicitlySet;
                    _isDropExistingExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDropExistingExplicitlySet", oldValue, _isDropExistingExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies IgnoreDupKey.")]
        [Browsable(true)]
        [AstXNameBinding("IgnoreDupKey", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean IgnoreDupKey
        {
            get { return IgnoreDupKey_BackingField; }
            set
            {
                if (IgnoreDupKey_BackingField != value)
                {
                    System.Boolean oldValue = IgnoreDupKey_BackingField;
                    IgnoreDupKey_BackingField = value;
                    VulcanOnPropertyChanged("IgnoreDupKey", oldValue, IgnoreDupKey_BackingField);
                    IsIgnoreDupKeyExplicitlySet = true;
                }
            }
        }

        public bool IsIgnoreDupKeyExplicitlySet
        {
            get { return _isIgnoreDupKeyExplicitlySet; }
            protected set
            {
                if (_isIgnoreDupKeyExplicitlySet != value)
                {
                    bool oldValue = _isIgnoreDupKeyExplicitlySet;
                    _isIgnoreDupKeyExplicitlySet = value;
                    VulcanOnPropertyChanged("IsIgnoreDupKeyExplicitlySet", oldValue, _isIgnoreDupKeyExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies Online.")]
        [Browsable(true)]
        [AstXNameBinding("Online", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean Online
        {
            get { return Online_BackingField; }
            set
            {
                if (Online_BackingField != value)
                {
                    System.Boolean oldValue = Online_BackingField;
                    Online_BackingField = value;
                    VulcanOnPropertyChanged("Online", oldValue, Online_BackingField);
                    IsOnlineExplicitlySet = true;
                }
            }
        }

        public bool IsOnlineExplicitlySet
        {
            get { return _isOnlineExplicitlySet; }
            protected set
            {
                if (_isOnlineExplicitlySet != value)
                {
                    bool oldValue = _isOnlineExplicitlySet;
                    _isOnlineExplicitlySet = value;
                    VulcanOnPropertyChanged("IsOnlineExplicitlySet", oldValue, _isOnlineExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies Clustered.")]
        [Browsable(true)]
        [AstXNameBinding("Clustered", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean Clustered
        {
            get { return Clustered_BackingField; }
            set
            {
                if (Clustered_BackingField != value)
                {
                    System.Boolean oldValue = Clustered_BackingField;
                    Clustered_BackingField = value;
                    VulcanOnPropertyChanged("Clustered", oldValue, Clustered_BackingField);
                    IsClusteredExplicitlySet = true;
                }
            }
        }

        public bool IsClusteredExplicitlySet
        {
            get { return _isClusteredExplicitlySet; }
            protected set
            {
                if (_isClusteredExplicitlySet != value)
                {
                    bool oldValue = _isClusteredExplicitlySet;
                    _isClusteredExplicitlySet = value;
                    VulcanOnPropertyChanged("IsClusteredExplicitlySet", oldValue, _isClusteredExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"Specifies Unique.")]
        [Browsable(true)]
        [AstXNameBinding("Unique", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean Unique
        {
            get { return Unique_BackingField; }
            set
            {
                if (Unique_BackingField != value)
                {
                    System.Boolean oldValue = Unique_BackingField;
                    Unique_BackingField = value;
                    VulcanOnPropertyChanged("Unique", oldValue, Unique_BackingField);
                    IsUniqueExplicitlySet = true;
                }
            }
        }

        public bool IsUniqueExplicitlySet
        {
            get { return _isUniqueExplicitlySet; }
            protected set
            {
                if (_isUniqueExplicitlySet != value)
                {
                    bool oldValue = _isUniqueExplicitlySet;
                    _isUniqueExplicitlySet = value;
                    VulcanOnPropertyChanged("IsUniqueExplicitlySet", oldValue, _isUniqueExplicitlySet);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"Specifies referenced key column names.")]
        [Browsable(false)]
        [AstXNameBinding("Column", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexColumnNode> Columns
        {
            get { return _columns; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"Specifies Leafs.")]
        [Browsable(false)]
        [AstXNameBinding("Leaf", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexLeafNode> Leafs
        {
            get { return _leafs; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods







        private void _columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanOnCollectionPropertyChanged("Columns", e);
        }

        private void _leafs_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanOnCollectionPropertyChanged("Leafs", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            PadIndex_BackingField = false;
            SortInTempDB_BackingField = false;
            DropExisting_BackingField = false;
            IgnoreDupKey_BackingField = false;
            Online_BackingField = false;
            Clustered_BackingField = false;
            Unique_BackingField = false;
            _columns = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexColumnNode>();
            _columns.CollectionChanged += _columns_CollectionChanged;
            _leafs = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableIndexLeafNode>();
            _leafs.CollectionChanged += _leafs_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());







            foreach (var item in _columns)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _leafs)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTableIndexNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTableIndexNode)targetItem;
            castedTargetItem.PadIndex_BackingField = PadIndex_BackingField;

            castedTargetItem.SortInTempDB_BackingField = SortInTempDB_BackingField;

            castedTargetItem.DropExisting_BackingField = DropExisting_BackingField;

            castedTargetItem.IgnoreDupKey_BackingField = IgnoreDupKey_BackingField;

            castedTargetItem.Online_BackingField = Online_BackingField;

            castedTargetItem.Clustered_BackingField = Clustered_BackingField;

            castedTargetItem.Unique_BackingField = Unique_BackingField;

            foreach (var item in _columns)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._columns.Add((VulcanEngine.IR.Ast.Table.AstTableIndexColumnNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _leafs)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._leafs.Add((VulcanEngine.IR.Ast.Table.AstTableIndexLeafNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstTableIndexNode(parentItem);
        }

        #endregion Cloning Support


    }
}
