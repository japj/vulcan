//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstEtlFragmentPathColumnMappingNode : VulcanEngine.IR.Ast.AstNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String SourcePathColumnName_BackingField;
        private bool __isNotFirstSet_SourcePathColumnName_BackingField;
        private bool _isSourcePathColumnNameExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String DestinationPathColumnName_BackingField;
        private bool __isNotFirstSet_DestinationPathColumnName_BackingField;
        private bool _isDestinationPathColumnNameExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("SourcePathColumnName", ChildType.Attribute)]
        public System.String SourcePathColumnName
        {
            get { return SourcePathColumnName_BackingField; }
            set
            {
                if (SourcePathColumnName_BackingField != value || !__isNotFirstSet_SourcePathColumnName_BackingField)
                {
                    __isNotFirstSet_SourcePathColumnName_BackingField = true;
                    System.String oldValue = SourcePathColumnName_BackingField;
                    SourcePathColumnName_BackingField = value;
                    VulcanOnPropertyChanged("SourcePathColumnName", oldValue, SourcePathColumnName_BackingField);
                    IsSourcePathColumnNameExplicitlySet = true;
                }
            }
        }

        public bool IsSourcePathColumnNameExplicitlySet
        {
            get { return _isSourcePathColumnNameExplicitlySet; }
            protected set
            {
                if (_isSourcePathColumnNameExplicitlySet != value)
                {
                    bool oldValue = _isSourcePathColumnNameExplicitlySet;
                    _isSourcePathColumnNameExplicitlySet = value;
                    VulcanOnPropertyChanged("IsSourcePathColumnNameExplicitlySet", oldValue, _isSourcePathColumnNameExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("DestinationPathColumnName", ChildType.Attribute)]
        public System.String DestinationPathColumnName
        {
            get { return DestinationPathColumnName_BackingField; }
            set
            {
                if (DestinationPathColumnName_BackingField != value || !__isNotFirstSet_DestinationPathColumnName_BackingField)
                {
                    __isNotFirstSet_DestinationPathColumnName_BackingField = true;
                    System.String oldValue = DestinationPathColumnName_BackingField;
                    DestinationPathColumnName_BackingField = value;
                    VulcanOnPropertyChanged("DestinationPathColumnName", oldValue, DestinationPathColumnName_BackingField);
                    IsDestinationPathColumnNameExplicitlySet = true;
                }
            }
        }

        public bool IsDestinationPathColumnNameExplicitlySet
        {
            get { return _isDestinationPathColumnNameExplicitlySet; }
            protected set
            {
                if (_isDestinationPathColumnNameExplicitlySet != value)
                {
                    bool oldValue = _isDestinationPathColumnNameExplicitlySet;
                    _isDestinationPathColumnNameExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDestinationPathColumnNameExplicitlySet", oldValue, _isDestinationPathColumnNameExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods


        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());


            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstEtlFragmentPathColumnMappingNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstEtlFragmentPathColumnMappingNode)targetItem;
            castedTargetItem.SourcePathColumnName_BackingField = SourcePathColumnName_BackingField;

            castedTargetItem.DestinationPathColumnName_BackingField = DestinationPathColumnName_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstEtlFragmentPathColumnMappingNode(parentItem);
        }

        #endregion Cloning Support


    }
}
