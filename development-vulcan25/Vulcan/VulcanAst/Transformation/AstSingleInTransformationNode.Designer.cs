//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [AstDoNotEmitXmlSchemaTypeAttribute]
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public abstract partial class AstSingleInTransformationNode : VulcanEngine.IR.Ast.Transformation.AstTransformationNode
    {
        #region Private Storage
        private VulcanEngine.IR.Ast.Transformation.AstDataflowMappedInputPathNode _inputPath;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("InputPath", ChildType.ChildDefinition)]
        public VulcanEngine.IR.Ast.Transformation.AstDataflowMappedInputPathNode InputPath
        {
            get { return _inputPath; }
            set
            {
                if (_inputPath != value)
                {
                    VulcanEngine.IR.Ast.Transformation.AstDataflowMappedInputPathNode oldValue = _inputPath;
                    _inputPath = value;
                    VulcanOnPropertyChanged("InputPath", oldValue, _inputPath);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods

        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());
            if (_inputPath != null)
            {
                definedAstNodes.Add(_inputPath);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstSingleInTransformationNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstSingleInTransformationNode)targetItem;
            if (_inputPath == null)
            {
                castedTargetItem._inputPath = null;
            }
            else if (cloneMapping.ContainsKey(_inputPath))
            {
                castedTargetItem._inputPath = (VulcanEngine.IR.Ast.Transformation.AstDataflowMappedInputPathNode)cloneMapping[_inputPath];
                _inputPath.CloneInto(cloneMapping[_inputPath], cloneMapping);
            }
            else
            {
                castedTargetItem._inputPath = _inputPath;
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        #endregion Cloning Support


    }
}
