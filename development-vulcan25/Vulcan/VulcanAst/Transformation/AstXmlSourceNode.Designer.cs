//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("XmlSource")]
    [AstSchemaTypeBindingAttribute("ETLXmlSourceElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstXmlSourceNode : VulcanEngine.IR.Ast.Transformation.AstSourceTransformationNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String XmlData_BackingField;
        private bool __isNotFirstSet_XmlData_BackingField;
        private bool _isXmlDataExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String XmlSchemaDefinition_BackingField;
        private bool __isNotFirstSet_XmlSchemaDefinition_BackingField;
        private bool _isXmlSchemaDefinitionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean UseInlineSchema_BackingField;
        private bool _isUseInlineSchemaExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Transformation.XmlSourceDataAccessMode XmlDataAccessMode_BackingField;
        private bool __isNotFirstSet_XmlDataAccessMode_BackingField;
        private bool _isXmlDataAccessModeExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstDataflowOutputPathNode> _outputPaths;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("XmlData", ChildType.Attribute)]
        public System.String XmlData
        {
            get { return XmlData_BackingField; }
            set
            {
                if (XmlData_BackingField != value || !__isNotFirstSet_XmlData_BackingField)
                {
                    __isNotFirstSet_XmlData_BackingField = true;
                    System.String oldValue = XmlData_BackingField;
                    XmlData_BackingField = value;
                    VulcanOnPropertyChanged("XmlData", oldValue, XmlData_BackingField);
                    IsXmlDataExplicitlySet = true;
                }
            }
        }

        public bool IsXmlDataExplicitlySet
        {
            get { return _isXmlDataExplicitlySet; }
            protected set
            {
                if (_isXmlDataExplicitlySet != value)
                {
                    bool oldValue = _isXmlDataExplicitlySet;
                    _isXmlDataExplicitlySet = value;
                    VulcanOnPropertyChanged("IsXmlDataExplicitlySet", oldValue, _isXmlDataExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("XmlSchemaDefinition", ChildType.Attribute)]
        public System.String XmlSchemaDefinition
        {
            get { return XmlSchemaDefinition_BackingField; }
            set
            {
                if (XmlSchemaDefinition_BackingField != value || !__isNotFirstSet_XmlSchemaDefinition_BackingField)
                {
                    __isNotFirstSet_XmlSchemaDefinition_BackingField = true;
                    System.String oldValue = XmlSchemaDefinition_BackingField;
                    XmlSchemaDefinition_BackingField = value;
                    VulcanOnPropertyChanged("XmlSchemaDefinition", oldValue, XmlSchemaDefinition_BackingField);
                    IsXmlSchemaDefinitionExplicitlySet = true;
                }
            }
        }

        public bool IsXmlSchemaDefinitionExplicitlySet
        {
            get { return _isXmlSchemaDefinitionExplicitlySet; }
            protected set
            {
                if (_isXmlSchemaDefinitionExplicitlySet != value)
                {
                    bool oldValue = _isXmlSchemaDefinitionExplicitlySet;
                    _isXmlSchemaDefinitionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsXmlSchemaDefinitionExplicitlySet", oldValue, _isXmlSchemaDefinitionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("UseInlineSchema", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean UseInlineSchema
        {
            get { return UseInlineSchema_BackingField; }
            set
            {
                if (UseInlineSchema_BackingField != value)
                {
                    System.Boolean oldValue = UseInlineSchema_BackingField;
                    UseInlineSchema_BackingField = value;
                    VulcanOnPropertyChanged("UseInlineSchema", oldValue, UseInlineSchema_BackingField);
                    IsUseInlineSchemaExplicitlySet = true;
                }
            }
        }

        public bool IsUseInlineSchemaExplicitlySet
        {
            get { return _isUseInlineSchemaExplicitlySet; }
            protected set
            {
                if (_isUseInlineSchemaExplicitlySet != value)
                {
                    bool oldValue = _isUseInlineSchemaExplicitlySet;
                    _isUseInlineSchemaExplicitlySet = value;
                    VulcanOnPropertyChanged("IsUseInlineSchemaExplicitlySet", oldValue, _isUseInlineSchemaExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("XmlDataAccessMode", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Transformation.XmlSourceDataAccessMode XmlDataAccessMode
        {
            get { return XmlDataAccessMode_BackingField; }
            set
            {
                if (XmlDataAccessMode_BackingField != value || !__isNotFirstSet_XmlDataAccessMode_BackingField)
                {
                    __isNotFirstSet_XmlDataAccessMode_BackingField = true;
                    VulcanEngine.IR.Ast.Transformation.XmlSourceDataAccessMode oldValue = XmlDataAccessMode_BackingField;
                    XmlDataAccessMode_BackingField = value;
                    VulcanOnPropertyChanged("XmlDataAccessMode", oldValue, XmlDataAccessMode_BackingField);
                    IsXmlDataAccessModeExplicitlySet = true;
                }
            }
        }

        public bool IsXmlDataAccessModeExplicitlySet
        {
            get { return _isXmlDataAccessModeExplicitlySet; }
            protected set
            {
                if (_isXmlDataAccessModeExplicitlySet != value)
                {
                    bool oldValue = _isXmlDataAccessModeExplicitlySet;
                    _isXmlDataAccessModeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsXmlDataAccessModeExplicitlySet", oldValue, _isXmlDataAccessModeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("OutputPath", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstDataflowOutputPathNode> OutputPaths
        {
            get { return _outputPaths; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods




        private void _outputPaths_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Transformation.AstDataflowOutputPathNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("OutputPaths", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            UseInlineSchema_BackingField = false;
            _outputPaths = new VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstDataflowOutputPathNode>();
            _outputPaths.CollectionChanged += _outputPaths_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());




            foreach (var item in _outputPaths)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstXmlSourceNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstXmlSourceNode)targetItem;
            castedTargetItem.XmlData_BackingField = XmlData_BackingField;

            castedTargetItem.XmlSchemaDefinition_BackingField = XmlSchemaDefinition_BackingField;

            castedTargetItem.UseInlineSchema_BackingField = UseInlineSchema_BackingField;

            castedTargetItem.XmlDataAccessMode_BackingField = XmlDataAccessMode_BackingField;

            foreach (var item in _outputPaths)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._outputPaths.Add((VulcanEngine.IR.Ast.Transformation.AstDataflowOutputPathNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstXmlSourceNode(parentItem);
        }

        #endregion Cloning Support


    }
}
