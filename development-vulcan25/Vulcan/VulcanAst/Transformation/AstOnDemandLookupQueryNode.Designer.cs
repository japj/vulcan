//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstOnDemandLookupQueryNode : VulcanEngine.IR.Ast.Task.AstQueryNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Int32 CacheSize_BackingField;
        private bool _isCacheSizeExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Transformation.CacheMode CacheMode_BackingField;
        private bool __isNotFirstSet_CacheMode_BackingField;
        private bool _isCacheModeExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Task.AstUnboundParameterMappingNode> _parameters;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanDefaultValue(25)]
        [Browsable(true)]
        [AstXNameBinding("CacheSize", ChildType.Attribute, DefaultValue = "25")]
        public System.Int32 CacheSize
        {
            get { return CacheSize_BackingField; }
            set
            {
                if (CacheSize_BackingField != value)
                {
                    System.Int32 oldValue = CacheSize_BackingField;
                    CacheSize_BackingField = value;
                    VulcanOnPropertyChanged("CacheSize", oldValue, CacheSize_BackingField);
                    IsCacheSizeExplicitlySet = true;
                }
            }
        }

        public bool IsCacheSizeExplicitlySet
        {
            get { return _isCacheSizeExplicitlySet; }
            protected set
            {
                if (_isCacheSizeExplicitlySet != value)
                {
                    bool oldValue = _isCacheSizeExplicitlySet;
                    _isCacheSizeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCacheSizeExplicitlySet", oldValue, _isCacheSizeExplicitlySet);
                }
            }
        }


        [AstRequiredProperty]
        [Browsable(true)]
        [AstXNameBinding("CacheMode", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Transformation.CacheMode CacheMode
        {
            get { return CacheMode_BackingField; }
            set
            {
                if (CacheMode_BackingField != value || !__isNotFirstSet_CacheMode_BackingField)
                {
                    __isNotFirstSet_CacheMode_BackingField = true;
                    VulcanEngine.IR.Ast.Transformation.CacheMode oldValue = CacheMode_BackingField;
                    CacheMode_BackingField = value;
                    VulcanOnPropertyChanged("CacheMode", oldValue, CacheMode_BackingField);
                    IsCacheModeExplicitlySet = true;
                }
            }
        }

        public bool IsCacheModeExplicitlySet
        {
            get { return _isCacheModeExplicitlySet; }
            protected set
            {
                if (_isCacheModeExplicitlySet != value)
                {
                    bool oldValue = _isCacheModeExplicitlySet;
                    _isCacheModeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCacheModeExplicitlySet", oldValue, _isCacheModeExplicitlySet);
                }
            }
        }


        [Browsable(false)]
        [AstXNameBinding("Parameter", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Task.AstUnboundParameterMappingNode> Parameters
        {
            get { return _parameters; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods


        private void _parameters_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Task.AstUnboundParameterMappingNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Parameters", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            CacheSize_BackingField = 25;
            _parameters = new VulcanCollection<VulcanEngine.IR.Ast.Task.AstUnboundParameterMappingNode>();
            _parameters.CollectionChanged += _parameters_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());


            foreach (var item in _parameters)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstOnDemandLookupQueryNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstOnDemandLookupQueryNode)targetItem;
            castedTargetItem.CacheSize_BackingField = CacheSize_BackingField;

            castedTargetItem.CacheMode_BackingField = CacheMode_BackingField;

            foreach (var item in _parameters)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._parameters.Add((VulcanEngine.IR.Ast.Task.AstUnboundParameterMappingNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstOnDemandLookupQueryNode(parentItem);
        }

        #endregion Cloning Support


    }
}
