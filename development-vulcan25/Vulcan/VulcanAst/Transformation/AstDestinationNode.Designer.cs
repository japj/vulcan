//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("Destination")]
    [AstSchemaTypeBindingAttribute("DestinationElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstDestinationNode : VulcanEngine.IR.Ast.Transformation.AstSingleInTransformationNode
    {
        #region Private Storage
        private VulcanEngine.IR.Ast.Table.AstTableNode _table;
        private bool __isNotFirstSet__table;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Transformation.DestinationAccessModeFacet AccessMode_BackingField;
        private bool _isAccessModeExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean TableLock_BackingField;
        private bool _isTableLockExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean CheckConstraints_BackingField;
        private bool _isCheckConstraintsExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean KeepIdentity_BackingField;
        private bool _isKeepIdentityExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean KeepNulls_BackingField;
        private bool _isKeepNullsExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Int32 RowsPerBatch_BackingField;
        private bool _isRowsPerBatchExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Int32 MaximumInsertCommitSize_BackingField;
        private bool _isMaximumInsertCommitSizeExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstDataflowColumnMappingNode> _mappings;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean DisableScd_BackingField;
        private bool _isDisableScdExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("TableName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Table.AstTableNode Table
        {
            get { return _table; }
            set
            {
                if (_table != value || !__isNotFirstSet__table)
                {
                    __isNotFirstSet__table = true;
                    if (_table != null)
                    {
                        _table.Unreference(this, "Table");
                    }
                    VulcanEngine.IR.Ast.Table.AstTableNode oldValue = _table;
                    _table = value;
                    if (_table != null)
                    {
                        _table.Reference(this, "Table");
                    }
                    VulcanOnPropertyChanged("Table", oldValue, _table);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Transformation.DestinationAccessModeFacet.Table)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("AccessMode", ChildType.Attribute, DefaultValue = "Table")]
        public VulcanEngine.IR.Ast.Transformation.DestinationAccessModeFacet AccessMode
        {
            get { return AccessMode_BackingField; }
            set
            {
                if (AccessMode_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Transformation.DestinationAccessModeFacet oldValue = AccessMode_BackingField;
                    AccessMode_BackingField = value;
                    VulcanOnPropertyChanged("AccessMode", oldValue, AccessMode_BackingField);
                    IsAccessModeExplicitlySet = true;
                }
            }
        }

        public bool IsAccessModeExplicitlySet
        {
            get { return _isAccessModeExplicitlySet; }
            protected set
            {
                if (_isAccessModeExplicitlySet != value)
                {
                    bool oldValue = _isAccessModeExplicitlySet;
                    _isAccessModeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsAccessModeExplicitlySet", oldValue, _isAccessModeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(true)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("TableLock", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean TableLock
        {
            get { return TableLock_BackingField; }
            set
            {
                if (TableLock_BackingField != value)
                {
                    System.Boolean oldValue = TableLock_BackingField;
                    TableLock_BackingField = value;
                    VulcanOnPropertyChanged("TableLock", oldValue, TableLock_BackingField);
                    IsTableLockExplicitlySet = true;
                }
            }
        }

        public bool IsTableLockExplicitlySet
        {
            get { return _isTableLockExplicitlySet; }
            protected set
            {
                if (_isTableLockExplicitlySet != value)
                {
                    bool oldValue = _isTableLockExplicitlySet;
                    _isTableLockExplicitlySet = value;
                    VulcanOnPropertyChanged("IsTableLockExplicitlySet", oldValue, _isTableLockExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(true)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("CheckConstraints", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean CheckConstraints
        {
            get { return CheckConstraints_BackingField; }
            set
            {
                if (CheckConstraints_BackingField != value)
                {
                    System.Boolean oldValue = CheckConstraints_BackingField;
                    CheckConstraints_BackingField = value;
                    VulcanOnPropertyChanged("CheckConstraints", oldValue, CheckConstraints_BackingField);
                    IsCheckConstraintsExplicitlySet = true;
                }
            }
        }

        public bool IsCheckConstraintsExplicitlySet
        {
            get { return _isCheckConstraintsExplicitlySet; }
            protected set
            {
                if (_isCheckConstraintsExplicitlySet != value)
                {
                    bool oldValue = _isCheckConstraintsExplicitlySet;
                    _isCheckConstraintsExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCheckConstraintsExplicitlySet", oldValue, _isCheckConstraintsExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("KeepIdentity", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean KeepIdentity
        {
            get { return KeepIdentity_BackingField; }
            set
            {
                if (KeepIdentity_BackingField != value)
                {
                    System.Boolean oldValue = KeepIdentity_BackingField;
                    KeepIdentity_BackingField = value;
                    VulcanOnPropertyChanged("KeepIdentity", oldValue, KeepIdentity_BackingField);
                    IsKeepIdentityExplicitlySet = true;
                }
            }
        }

        public bool IsKeepIdentityExplicitlySet
        {
            get { return _isKeepIdentityExplicitlySet; }
            protected set
            {
                if (_isKeepIdentityExplicitlySet != value)
                {
                    bool oldValue = _isKeepIdentityExplicitlySet;
                    _isKeepIdentityExplicitlySet = value;
                    VulcanOnPropertyChanged("IsKeepIdentityExplicitlySet", oldValue, _isKeepIdentityExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("KeepNulls", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean KeepNulls
        {
            get { return KeepNulls_BackingField; }
            set
            {
                if (KeepNulls_BackingField != value)
                {
                    System.Boolean oldValue = KeepNulls_BackingField;
                    KeepNulls_BackingField = value;
                    VulcanOnPropertyChanged("KeepNulls", oldValue, KeepNulls_BackingField);
                    IsKeepNullsExplicitlySet = true;
                }
            }
        }

        public bool IsKeepNullsExplicitlySet
        {
            get { return _isKeepNullsExplicitlySet; }
            protected set
            {
                if (_isKeepNullsExplicitlySet != value)
                {
                    bool oldValue = _isKeepNullsExplicitlySet;
                    _isKeepNullsExplicitlySet = value;
                    VulcanOnPropertyChanged("IsKeepNullsExplicitlySet", oldValue, _isKeepNullsExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("RowsPerBatch", ChildType.Attribute)]
        public System.Int32 RowsPerBatch
        {
            get { return RowsPerBatch_BackingField; }
            set
            {
                if (RowsPerBatch_BackingField != value)
                {
                    System.Int32 oldValue = RowsPerBatch_BackingField;
                    RowsPerBatch_BackingField = value;
                    VulcanOnPropertyChanged("RowsPerBatch", oldValue, RowsPerBatch_BackingField);
                    IsRowsPerBatchExplicitlySet = true;
                }
            }
        }

        public bool IsRowsPerBatchExplicitlySet
        {
            get { return _isRowsPerBatchExplicitlySet; }
            protected set
            {
                if (_isRowsPerBatchExplicitlySet != value)
                {
                    bool oldValue = _isRowsPerBatchExplicitlySet;
                    _isRowsPerBatchExplicitlySet = value;
                    VulcanOnPropertyChanged("IsRowsPerBatchExplicitlySet", oldValue, _isRowsPerBatchExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("MaximumInsertCommitSize", ChildType.Attribute)]
        public System.Int32 MaximumInsertCommitSize
        {
            get { return MaximumInsertCommitSize_BackingField; }
            set
            {
                if (MaximumInsertCommitSize_BackingField != value)
                {
                    System.Int32 oldValue = MaximumInsertCommitSize_BackingField;
                    MaximumInsertCommitSize_BackingField = value;
                    VulcanOnPropertyChanged("MaximumInsertCommitSize", oldValue, MaximumInsertCommitSize_BackingField);
                    IsMaximumInsertCommitSizeExplicitlySet = true;
                }
            }
        }

        public bool IsMaximumInsertCommitSizeExplicitlySet
        {
            get { return _isMaximumInsertCommitSizeExplicitlySet; }
            protected set
            {
                if (_isMaximumInsertCommitSizeExplicitlySet != value)
                {
                    bool oldValue = _isMaximumInsertCommitSizeExplicitlySet;
                    _isMaximumInsertCommitSizeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsMaximumInsertCommitSizeExplicitlySet", oldValue, _isMaximumInsertCommitSizeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Mapping", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstDataflowColumnMappingNode> Mappings
        {
            get { return _mappings; }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("DisableScd", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean DisableScd
        {
            get { return DisableScd_BackingField; }
            set
            {
                if (DisableScd_BackingField != value)
                {
                    System.Boolean oldValue = DisableScd_BackingField;
                    DisableScd_BackingField = value;
                    VulcanOnPropertyChanged("DisableScd", oldValue, DisableScd_BackingField);
                    IsDisableScdExplicitlySet = true;
                }
            }
        }

        public bool IsDisableScdExplicitlySet
        {
            get { return _isDisableScdExplicitlySet; }
            protected set
            {
                if (_isDisableScdExplicitlySet != value)
                {
                    bool oldValue = _isDisableScdExplicitlySet;
                    _isDisableScdExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDisableScdExplicitlySet", oldValue, _isDisableScdExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods








        private void _mappings_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanOnCollectionPropertyChanged("Mappings", e);
        }


        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            AccessMode_BackingField = VulcanEngine.IR.Ast.Transformation.DestinationAccessModeFacet.Table;
            TableLock_BackingField = true;
            CheckConstraints_BackingField = true;
            KeepIdentity_BackingField = false;
            KeepNulls_BackingField = false;
            _mappings = new VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstDataflowColumnMappingNode>();
            _mappings.CollectionChanged += _mappings_CollectionChanged;
            DisableScd_BackingField = false;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());








            foreach (var item in _mappings)
            {
                definedAstNodes.Add(item);
            }


            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstDestinationNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstDestinationNode)targetItem;
            if (_table == null)
            {
                castedTargetItem._table = null;
            }
            else if (cloneMapping.ContainsKey(_table))
            {
                castedTargetItem._table = (VulcanEngine.IR.Ast.Table.AstTableNode)cloneMapping[_table];
            }
            else
            {
                castedTargetItem._table = _table;
            }

            castedTargetItem.AccessMode_BackingField = AccessMode_BackingField;

            castedTargetItem.TableLock_BackingField = TableLock_BackingField;

            castedTargetItem.CheckConstraints_BackingField = CheckConstraints_BackingField;

            castedTargetItem.KeepIdentity_BackingField = KeepIdentity_BackingField;

            castedTargetItem.KeepNulls_BackingField = KeepNulls_BackingField;

            castedTargetItem.RowsPerBatch_BackingField = RowsPerBatch_BackingField;

            castedTargetItem.MaximumInsertCommitSize_BackingField = MaximumInsertCommitSize_BackingField;

            foreach (var item in _mappings)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._mappings.Add((VulcanEngine.IR.Ast.Transformation.AstDataflowColumnMappingNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            castedTargetItem.DisableScd_BackingField = DisableScd_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstDestinationNode(parentItem);
        }

        #endregion Cloning Support


    }
}
