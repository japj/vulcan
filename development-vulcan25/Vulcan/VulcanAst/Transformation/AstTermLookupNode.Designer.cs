//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("TermLookup")]
    [AstSchemaTypeBindingAttribute("TransformationTermLookupElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstTermLookupNode : VulcanEngine.IR.Ast.Transformation.AstSingleInTransformationNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean AutoPassthrough_BackingField;
        private bool _isAutoPassthroughExplicitlySet;

        private VulcanEngine.IR.Ast.Connection.AstConnectionNode _connection;
        private bool __isNotFirstSet__connection;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean IsCaseSensitive_BackingField;
        private bool _isIsCaseSensitiveExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String RefTermColumnName_BackingField;
        private bool __isNotFirstSet_RefTermColumnName_BackingField;
        private bool _isRefTermColumnNameExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String RefTermTableName_BackingField;
        private bool __isNotFirstSet_RefTermTableName_BackingField;
        private bool _isRefTermTableNameExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstTermLookupColumnNode> _inputColumns;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("AutoPassThrough", ChildType.Attribute)]
        public System.Boolean AutoPassthrough
        {
            get { return AutoPassthrough_BackingField; }
            set
            {
                if (AutoPassthrough_BackingField != value)
                {
                    System.Boolean oldValue = AutoPassthrough_BackingField;
                    AutoPassthrough_BackingField = value;
                    VulcanOnPropertyChanged("AutoPassthrough", oldValue, AutoPassthrough_BackingField);
                    IsAutoPassthroughExplicitlySet = true;
                }
            }
        }

        public bool IsAutoPassthroughExplicitlySet
        {
            get { return _isAutoPassthroughExplicitlySet; }
            protected set
            {
                if (_isAutoPassthroughExplicitlySet != value)
                {
                    bool oldValue = _isAutoPassthroughExplicitlySet;
                    _isAutoPassthroughExplicitlySet = value;
                    VulcanOnPropertyChanged("IsAutoPassthroughExplicitlySet", oldValue, _isAutoPassthroughExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("ConnectionName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Connection.AstConnectionNode Connection
        {
            get { return _connection; }
            set
            {
                if (_connection != value || !__isNotFirstSet__connection)
                {
                    __isNotFirstSet__connection = true;
                    if (_connection != null)
                    {
                        _connection.Unreference(this, "Connection");
                    }
                    VulcanEngine.IR.Ast.Connection.AstConnectionNode oldValue = _connection;
                    _connection = value;
                    if (_connection != null)
                    {
                        _connection.Reference(this, "Connection");
                    }
                    VulcanOnPropertyChanged("Connection", oldValue, _connection);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("IsCaseSensitive", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean IsCaseSensitive
        {
            get { return IsCaseSensitive_BackingField; }
            set
            {
                if (IsCaseSensitive_BackingField != value)
                {
                    System.Boolean oldValue = IsCaseSensitive_BackingField;
                    IsCaseSensitive_BackingField = value;
                    VulcanOnPropertyChanged("IsCaseSensitive", oldValue, IsCaseSensitive_BackingField);
                    IsIsCaseSensitiveExplicitlySet = true;
                }
            }
        }

        public bool IsIsCaseSensitiveExplicitlySet
        {
            get { return _isIsCaseSensitiveExplicitlySet; }
            protected set
            {
                if (_isIsCaseSensitiveExplicitlySet != value)
                {
                    bool oldValue = _isIsCaseSensitiveExplicitlySet;
                    _isIsCaseSensitiveExplicitlySet = value;
                    VulcanOnPropertyChanged("IsIsCaseSensitiveExplicitlySet", oldValue, _isIsCaseSensitiveExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("RefTermColumnName", ChildType.Attribute)]
        public System.String RefTermColumnName
        {
            get { return RefTermColumnName_BackingField; }
            set
            {
                if (RefTermColumnName_BackingField != value || !__isNotFirstSet_RefTermColumnName_BackingField)
                {
                    __isNotFirstSet_RefTermColumnName_BackingField = true;
                    System.String oldValue = RefTermColumnName_BackingField;
                    RefTermColumnName_BackingField = value;
                    VulcanOnPropertyChanged("RefTermColumnName", oldValue, RefTermColumnName_BackingField);
                    IsRefTermColumnNameExplicitlySet = true;
                }
            }
        }

        public bool IsRefTermColumnNameExplicitlySet
        {
            get { return _isRefTermColumnNameExplicitlySet; }
            protected set
            {
                if (_isRefTermColumnNameExplicitlySet != value)
                {
                    bool oldValue = _isRefTermColumnNameExplicitlySet;
                    _isRefTermColumnNameExplicitlySet = value;
                    VulcanOnPropertyChanged("IsRefTermColumnNameExplicitlySet", oldValue, _isRefTermColumnNameExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("RefTermTableName", ChildType.Attribute)]
        public System.String RefTermTableName
        {
            get { return RefTermTableName_BackingField; }
            set
            {
                if (RefTermTableName_BackingField != value || !__isNotFirstSet_RefTermTableName_BackingField)
                {
                    __isNotFirstSet_RefTermTableName_BackingField = true;
                    System.String oldValue = RefTermTableName_BackingField;
                    RefTermTableName_BackingField = value;
                    VulcanOnPropertyChanged("RefTermTableName", oldValue, RefTermTableName_BackingField);
                    IsRefTermTableNameExplicitlySet = true;
                }
            }
        }

        public bool IsRefTermTableNameExplicitlySet
        {
            get { return _isRefTermTableNameExplicitlySet; }
            protected set
            {
                if (_isRefTermTableNameExplicitlySet != value)
                {
                    bool oldValue = _isRefTermTableNameExplicitlySet;
                    _isRefTermTableNameExplicitlySet = value;
                    VulcanOnPropertyChanged("IsRefTermTableNameExplicitlySet", oldValue, _isRefTermTableNameExplicitlySet);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Column", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstTermLookupColumnNode> InputColumns
        {
            get { return _inputColumns; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods





        private void _inputColumns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Transformation.AstTermLookupColumnNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("InputColumns", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            IsCaseSensitive_BackingField = false;
            _inputColumns = new VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstTermLookupColumnNode>();
            _inputColumns.CollectionChanged += _inputColumns_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());





            foreach (var item in _inputColumns)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTermLookupNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTermLookupNode)targetItem;
            castedTargetItem.AutoPassthrough_BackingField = AutoPassthrough_BackingField;

            if (_connection == null)
            {
                castedTargetItem._connection = null;
            }
            else if (cloneMapping.ContainsKey(_connection))
            {
                castedTargetItem._connection = (VulcanEngine.IR.Ast.Connection.AstConnectionNode)cloneMapping[_connection];
            }
            else
            {
                castedTargetItem._connection = _connection;
            }

            castedTargetItem.IsCaseSensitive_BackingField = IsCaseSensitive_BackingField;

            castedTargetItem.RefTermColumnName_BackingField = RefTermColumnName_BackingField;

            castedTargetItem.RefTermTableName_BackingField = RefTermTableName_BackingField;

            foreach (var item in _inputColumns)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._inputColumns.Add((VulcanEngine.IR.Ast.Transformation.AstTermLookupColumnNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstTermLookupNode(parentItem);
        }

        #endregion Cloning Support


    }
}
