//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [AstDoNotEmitXmlSchemaTypeAttribute]
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public abstract partial class AstTransformationNode : VulcanEngine.IR.Ast.AstScopeBoundaryNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean ValidateExternalMetadata_BackingField;
        private bool _isValidateExternalMetadataExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Transformation.ErrorRowDisposition DefaultErrorRowDisposition_BackingField;
        private bool _isDefaultErrorRowDispositionExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDefaultValue(true)]
        [VulcanDescription(@"Specifies ValidateExternalMetadata.")]
        [Browsable(true)]
        [AstXNameBinding("ValidateExternalMetadata", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean ValidateExternalMetadata
        {
            get { return ValidateExternalMetadata_BackingField; }
            set
            {
                if (ValidateExternalMetadata_BackingField != value)
                {
                    System.Boolean oldValue = ValidateExternalMetadata_BackingField;
                    ValidateExternalMetadata_BackingField = value;
                    VulcanOnPropertyChanged("ValidateExternalMetadata", oldValue, ValidateExternalMetadata_BackingField);
                    IsValidateExternalMetadataExplicitlySet = true;
                }
            }
        }

        public bool IsValidateExternalMetadataExplicitlySet
        {
            get { return _isValidateExternalMetadataExplicitlySet; }
            protected set
            {
                if (_isValidateExternalMetadataExplicitlySet != value)
                {
                    bool oldValue = _isValidateExternalMetadataExplicitlySet;
                    _isValidateExternalMetadataExplicitlySet = value;
                    VulcanOnPropertyChanged("IsValidateExternalMetadataExplicitlySet", oldValue, _isValidateExternalMetadataExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Transformation.ErrorRowDisposition.IgnoreFailure)]
        [Browsable(true)]
        [AstXNameBinding("DefaultErrorRowDisposition", ChildType.Attribute, DefaultValue = "IgnoreFailure")]
        public VulcanEngine.IR.Ast.Transformation.ErrorRowDisposition DefaultErrorRowDisposition
        {
            get { return DefaultErrorRowDisposition_BackingField; }
            set
            {
                if (DefaultErrorRowDisposition_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Transformation.ErrorRowDisposition oldValue = DefaultErrorRowDisposition_BackingField;
                    DefaultErrorRowDisposition_BackingField = value;
                    VulcanOnPropertyChanged("DefaultErrorRowDisposition", oldValue, DefaultErrorRowDisposition_BackingField);
                    IsDefaultErrorRowDispositionExplicitlySet = true;
                }
            }
        }

        public bool IsDefaultErrorRowDispositionExplicitlySet
        {
            get { return _isDefaultErrorRowDispositionExplicitlySet; }
            protected set
            {
                if (_isDefaultErrorRowDispositionExplicitlySet != value)
                {
                    bool oldValue = _isDefaultErrorRowDispositionExplicitlySet;
                    _isDefaultErrorRowDispositionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDefaultErrorRowDispositionExplicitlySet", oldValue, _isDefaultErrorRowDispositionExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods


        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            ValidateExternalMetadata_BackingField = true;
            DefaultErrorRowDisposition_BackingField = VulcanEngine.IR.Ast.Transformation.ErrorRowDisposition.IgnoreFailure;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());


            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTransformationNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTransformationNode)targetItem;
            castedTargetItem.ValidateExternalMetadata_BackingField = ValidateExternalMetadata_BackingField;

            castedTargetItem.DefaultErrorRowDisposition_BackingField = DefaultErrorRowDisposition_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        #endregion Cloning Support


    }
}
