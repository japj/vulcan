//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Transformation
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("SlowlyChangingDimension")]
    [AstSchemaTypeBindingAttribute("TransformationSlowlyChangingDimensionElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstSlowlyChangingDimensionNode : VulcanEngine.IR.Ast.Transformation.AstSingleInTransformationNode
    {
        #region Private Storage
        private VulcanEngine.IR.Ast.Connection.AstConnectionNode _connection;
        private bool __isNotFirstSet__connection;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String Query_BackingField;
        private bool __isNotFirstSet_Query_BackingField;
        private bool _isQueryExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String CurrentRowWhere_BackingField;
        private bool __isNotFirstSet_CurrentRowWhere_BackingField;
        private bool _isCurrentRowWhereExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean EnableInferredMember_BackingField;
        private bool _isEnableInferredMemberExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean FailOnFixedAttributeChange_BackingField;
        private bool _isFailOnFixedAttributeChangeExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean FailOnLookupFailure_BackingField;
        private bool _isFailOnLookupFailureExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Int32 IncomingRowChangeType_BackingField;
        private bool _isIncomingRowChangeTypeExplicitlySet;

        private VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode _inferredMemberIndicator;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean UpdateChangingAttributeHistory_BackingField;
        private bool _isUpdateChangingAttributeHistoryExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstScdTypeColumnMappingNode> _mappings;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("ConnectionName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Connection.AstConnectionNode Connection
        {
            get { return _connection; }
            set
            {
                if (_connection != value || !__isNotFirstSet__connection)
                {
                    __isNotFirstSet__connection = true;
                    if (_connection != null)
                    {
                        _connection.Unreference(this, "Connection");
                    }
                    VulcanEngine.IR.Ast.Connection.AstConnectionNode oldValue = _connection;
                    _connection = value;
                    if (_connection != null)
                    {
                        _connection.Reference(this, "Connection");
                    }
                    VulcanOnPropertyChanged("Connection", oldValue, _connection);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Query", ChildType.ChildDefinition)]
        public System.String Query
        {
            get { return Query_BackingField; }
            set
            {
                if (Query_BackingField != value || !__isNotFirstSet_Query_BackingField)
                {
                    __isNotFirstSet_Query_BackingField = true;
                    System.String oldValue = Query_BackingField;
                    Query_BackingField = value;
                    VulcanOnPropertyChanged("Query", oldValue, Query_BackingField);
                    IsQueryExplicitlySet = true;
                }
            }
        }

        public bool IsQueryExplicitlySet
        {
            get { return _isQueryExplicitlySet; }
            protected set
            {
                if (_isQueryExplicitlySet != value)
                {
                    bool oldValue = _isQueryExplicitlySet;
                    _isQueryExplicitlySet = value;
                    VulcanOnPropertyChanged("IsQueryExplicitlySet", oldValue, _isQueryExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("CurrentRowWhere", ChildType.ChildDefinition)]
        public System.String CurrentRowWhere
        {
            get { return CurrentRowWhere_BackingField; }
            set
            {
                if (CurrentRowWhere_BackingField != value || !__isNotFirstSet_CurrentRowWhere_BackingField)
                {
                    __isNotFirstSet_CurrentRowWhere_BackingField = true;
                    System.String oldValue = CurrentRowWhere_BackingField;
                    CurrentRowWhere_BackingField = value;
                    VulcanOnPropertyChanged("CurrentRowWhere", oldValue, CurrentRowWhere_BackingField);
                    IsCurrentRowWhereExplicitlySet = true;
                }
            }
        }

        public bool IsCurrentRowWhereExplicitlySet
        {
            get { return _isCurrentRowWhereExplicitlySet; }
            protected set
            {
                if (_isCurrentRowWhereExplicitlySet != value)
                {
                    bool oldValue = _isCurrentRowWhereExplicitlySet;
                    _isCurrentRowWhereExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCurrentRowWhereExplicitlySet", oldValue, _isCurrentRowWhereExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("EnableInferredMember", ChildType.Attribute)]
        public System.Boolean EnableInferredMember
        {
            get { return EnableInferredMember_BackingField; }
            set
            {
                if (EnableInferredMember_BackingField != value)
                {
                    System.Boolean oldValue = EnableInferredMember_BackingField;
                    EnableInferredMember_BackingField = value;
                    VulcanOnPropertyChanged("EnableInferredMember", oldValue, EnableInferredMember_BackingField);
                    IsEnableInferredMemberExplicitlySet = true;
                }
            }
        }

        public bool IsEnableInferredMemberExplicitlySet
        {
            get { return _isEnableInferredMemberExplicitlySet; }
            protected set
            {
                if (_isEnableInferredMemberExplicitlySet != value)
                {
                    bool oldValue = _isEnableInferredMemberExplicitlySet;
                    _isEnableInferredMemberExplicitlySet = value;
                    VulcanOnPropertyChanged("IsEnableInferredMemberExplicitlySet", oldValue, _isEnableInferredMemberExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("FailOnFixedAttributeChange", ChildType.Attribute)]
        public System.Boolean FailOnFixedAttributeChange
        {
            get { return FailOnFixedAttributeChange_BackingField; }
            set
            {
                if (FailOnFixedAttributeChange_BackingField != value)
                {
                    System.Boolean oldValue = FailOnFixedAttributeChange_BackingField;
                    FailOnFixedAttributeChange_BackingField = value;
                    VulcanOnPropertyChanged("FailOnFixedAttributeChange", oldValue, FailOnFixedAttributeChange_BackingField);
                    IsFailOnFixedAttributeChangeExplicitlySet = true;
                }
            }
        }

        public bool IsFailOnFixedAttributeChangeExplicitlySet
        {
            get { return _isFailOnFixedAttributeChangeExplicitlySet; }
            protected set
            {
                if (_isFailOnFixedAttributeChangeExplicitlySet != value)
                {
                    bool oldValue = _isFailOnFixedAttributeChangeExplicitlySet;
                    _isFailOnFixedAttributeChangeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsFailOnFixedAttributeChangeExplicitlySet", oldValue, _isFailOnFixedAttributeChangeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("FailOnLookupFailure", ChildType.Attribute)]
        public System.Boolean FailOnLookupFailure
        {
            get { return FailOnLookupFailure_BackingField; }
            set
            {
                if (FailOnLookupFailure_BackingField != value)
                {
                    System.Boolean oldValue = FailOnLookupFailure_BackingField;
                    FailOnLookupFailure_BackingField = value;
                    VulcanOnPropertyChanged("FailOnLookupFailure", oldValue, FailOnLookupFailure_BackingField);
                    IsFailOnLookupFailureExplicitlySet = true;
                }
            }
        }

        public bool IsFailOnLookupFailureExplicitlySet
        {
            get { return _isFailOnLookupFailureExplicitlySet; }
            protected set
            {
                if (_isFailOnLookupFailureExplicitlySet != value)
                {
                    bool oldValue = _isFailOnLookupFailureExplicitlySet;
                    _isFailOnLookupFailureExplicitlySet = value;
                    VulcanOnPropertyChanged("IsFailOnLookupFailureExplicitlySet", oldValue, _isFailOnLookupFailureExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("IncomingRowChangeType", ChildType.Attribute)]
        public System.Int32 IncomingRowChangeType
        {
            get { return IncomingRowChangeType_BackingField; }
            set
            {
                if (IncomingRowChangeType_BackingField != value)
                {
                    System.Int32 oldValue = IncomingRowChangeType_BackingField;
                    IncomingRowChangeType_BackingField = value;
                    VulcanOnPropertyChanged("IncomingRowChangeType", oldValue, IncomingRowChangeType_BackingField);
                    IsIncomingRowChangeTypeExplicitlySet = true;
                }
            }
        }

        public bool IsIncomingRowChangeTypeExplicitlySet
        {
            get { return _isIncomingRowChangeTypeExplicitlySet; }
            protected set
            {
                if (_isIncomingRowChangeTypeExplicitlySet != value)
                {
                    bool oldValue = _isIncomingRowChangeTypeExplicitlySet;
                    _isIncomingRowChangeTypeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsIncomingRowChangeTypeExplicitlySet", oldValue, _isIncomingRowChangeTypeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("InferredMemberIndicator", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode InferredMemberIndicator
        {
            get { return _inferredMemberIndicator; }
            set
            {
                if (_inferredMemberIndicator != value)
                {
                    if (_inferredMemberIndicator != null)
                    {
                        _inferredMemberIndicator.Unreference(this, "InferredMemberIndicator");
                    }
                    VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode oldValue = _inferredMemberIndicator;
                    _inferredMemberIndicator = value;
                    if (_inferredMemberIndicator != null)
                    {
                        _inferredMemberIndicator.Reference(this, "InferredMemberIndicator");
                    }
                    VulcanOnPropertyChanged("InferredMemberIndicator", oldValue, _inferredMemberIndicator);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("UpdateChangingAttributeHistory", ChildType.Attribute)]
        public System.Boolean UpdateChangingAttributeHistory
        {
            get { return UpdateChangingAttributeHistory_BackingField; }
            set
            {
                if (UpdateChangingAttributeHistory_BackingField != value)
                {
                    System.Boolean oldValue = UpdateChangingAttributeHistory_BackingField;
                    UpdateChangingAttributeHistory_BackingField = value;
                    VulcanOnPropertyChanged("UpdateChangingAttributeHistory", oldValue, UpdateChangingAttributeHistory_BackingField);
                    IsUpdateChangingAttributeHistoryExplicitlySet = true;
                }
            }
        }

        public bool IsUpdateChangingAttributeHistoryExplicitlySet
        {
            get { return _isUpdateChangingAttributeHistoryExplicitlySet; }
            protected set
            {
                if (_isUpdateChangingAttributeHistoryExplicitlySet != value)
                {
                    bool oldValue = _isUpdateChangingAttributeHistoryExplicitlySet;
                    _isUpdateChangingAttributeHistoryExplicitlySet = value;
                    VulcanOnPropertyChanged("IsUpdateChangingAttributeHistoryExplicitlySet", oldValue, _isUpdateChangingAttributeHistoryExplicitlySet);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(true)]
        [AstXNameBinding("Mapping", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstScdTypeColumnMappingNode> Mappings
        {
            get { return _mappings; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods









        private void _mappings_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanOnCollectionPropertyChanged("Mappings", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            _mappings = new VulcanCollection<VulcanEngine.IR.Ast.Transformation.AstScdTypeColumnMappingNode>();
            _mappings.CollectionChanged += _mappings_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());









            foreach (var item in _mappings)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstSlowlyChangingDimensionNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstSlowlyChangingDimensionNode)targetItem;
            if (_connection == null)
            {
                castedTargetItem._connection = null;
            }
            else if (cloneMapping.ContainsKey(_connection))
            {
                castedTargetItem._connection = (VulcanEngine.IR.Ast.Connection.AstConnectionNode)cloneMapping[_connection];
            }
            else
            {
                castedTargetItem._connection = _connection;
            }

            castedTargetItem.Query_BackingField = Query_BackingField;

            castedTargetItem.CurrentRowWhere_BackingField = CurrentRowWhere_BackingField;

            castedTargetItem.EnableInferredMember_BackingField = EnableInferredMember_BackingField;

            castedTargetItem.FailOnFixedAttributeChange_BackingField = FailOnFixedAttributeChange_BackingField;

            castedTargetItem.FailOnLookupFailure_BackingField = FailOnLookupFailure_BackingField;

            castedTargetItem.IncomingRowChangeType_BackingField = IncomingRowChangeType_BackingField;

            if (_inferredMemberIndicator == null)
            {
                castedTargetItem._inferredMemberIndicator = null;
            }
            else if (cloneMapping.ContainsKey(_inferredMemberIndicator))
            {
                castedTargetItem._inferredMemberIndicator = (VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode)cloneMapping[_inferredMemberIndicator];
            }
            else
            {
                castedTargetItem._inferredMemberIndicator = _inferredMemberIndicator;
            }

            castedTargetItem.UpdateChangingAttributeHistory_BackingField = UpdateChangingAttributeHistory_BackingField;

            foreach (var item in _mappings)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._mappings.Add((VulcanEngine.IR.Ast.Transformation.AstScdTypeColumnMappingNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstSlowlyChangingDimensionNode(parentItem);
        }

        #endregion Cloning Support


    }
}
