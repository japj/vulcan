//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast
{
    [AstSchemaTypeBindingAttribute("VulcanRootElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstRootNode : VulcanEngine.IR.Ast.AstNode, IRootItem
    {
        #region Private Storage
        private VulcanCollection<VulcanEngine.IR.Ast.Connection.AstConnectionNode> _connections;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableBaseNode> _tables;

        private VulcanCollection<VulcanEngine.IR.Ast.Dimension.AstDimensionNode> _dimensions;

        private VulcanCollection<VulcanEngine.IR.Ast.Fact.AstFactNode> _facts;

        private VulcanCollection<VulcanEngine.IR.Ast.Task.AstPackageBaseNode> _packages;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstSchemaNode> _schemas;

        private VulcanCollection<VulcanEngine.IR.Ast.Table.AstPrincipalNode> _principals;

        private VulcanCollection<VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode> _persistentVariables;

        private VulcanCollection<VulcanEngine.IR.Ast.AstTemplateNode> _templates;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Connection", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Connection.AstConnectionNode> Connections
        {
            get { return _connections; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Table", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableNode))]
        [AstXNameBinding("CloneTable", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableCloneNode))]
        [AstXNameBinding("TableTemplateInstance", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableTemplateInstanceNode))]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableBaseNode> Tables
        {
            get { return _tables; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Dimension", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Dimension.AstDimensionNode> Dimensions
        {
            get { return _dimensions; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Fact", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Fact.AstFactNode> Facts
        {
            get { return _facts; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Package", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Task.AstPackageNode))]
        [AstXNameBinding("PackageTemplateInstance", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Task.AstPackageTemplateInstanceNode))]
        public VulcanCollection<VulcanEngine.IR.Ast.Task.AstPackageBaseNode> Packages
        {
            get { return _packages; }
        }


        [VulcanCategory("ReadOnly")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Schema", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstSchemaNode> Schemas
        {
            get { return _schemas; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("Principal", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Table.AstPrincipalNode> Principals
        {
            get { return _principals; }
        }


        [VulcanCategory("Read Only")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("PersistentVariable", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode> PersistentVariables
        {
            get { return _persistentVariables; }
        }


        [VulcanCategory("Read Only")]
        [Browsable(false)]
        [AstXNameBinding("TaskTemplate", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Task.AstTaskTemplateNode))]
        [AstXNameBinding("PackageTemplate", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Task.AstPackageTemplateNode))]
        [AstXNameBinding("TransformationTemplate", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Transformation.AstTransformationTemplateNode))]
        [AstXNameBinding("TableTemplate", ChildType.ListChildDefinition, SubtypeOverride = typeof(VulcanEngine.IR.Ast.Table.AstTableTemplateNode))]
        public VulcanCollection<VulcanEngine.IR.Ast.AstTemplateNode> Templates
        {
            get { return _templates; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods
        private void _connections_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Connection.AstConnectionNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Connections", e);
        }

        private void _tables_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstTableBaseNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Tables", e);
        }

        private void _dimensions_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Dimension.AstDimensionNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Dimensions", e);
        }

        private void _facts_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Fact.AstFactNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Facts", e);
        }

        private void _packages_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Task.AstPackageBaseNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Packages", e);
        }

        private void _schemas_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstSchemaNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Schemas", e);
        }

        private void _principals_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Table.AstPrincipalNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Principals", e);
        }

        private void _persistentVariables_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("PersistentVariables", e);
        }

        private void _templates_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.AstTemplateNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Templates", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            SymbolTable = new SymbolTable(this);
            _connections = new VulcanCollection<VulcanEngine.IR.Ast.Connection.AstConnectionNode>();
            _connections.CollectionChanged += _connections_CollectionChanged;
            _tables = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstTableBaseNode>();
            _tables.CollectionChanged += _tables_CollectionChanged;
            _dimensions = new VulcanCollection<VulcanEngine.IR.Ast.Dimension.AstDimensionNode>();
            _dimensions.CollectionChanged += _dimensions_CollectionChanged;
            _facts = new VulcanCollection<VulcanEngine.IR.Ast.Fact.AstFactNode>();
            _facts.CollectionChanged += _facts_CollectionChanged;
            _packages = new VulcanCollection<VulcanEngine.IR.Ast.Task.AstPackageBaseNode>();
            _packages.CollectionChanged += _packages_CollectionChanged;
            _schemas = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstSchemaNode>();
            _schemas.CollectionChanged += _schemas_CollectionChanged;
            _principals = new VulcanCollection<VulcanEngine.IR.Ast.Table.AstPrincipalNode>();
            _principals.CollectionChanged += _principals_CollectionChanged;
            _persistentVariables = new VulcanCollection<VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode>();
            _persistentVariables.CollectionChanged += _persistentVariables_CollectionChanged;
            _templates = new VulcanCollection<VulcanEngine.IR.Ast.AstTemplateNode>();
            _templates.CollectionChanged += _templates_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());
            foreach (var item in _connections)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _tables)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _dimensions)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _facts)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _packages)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _schemas)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _principals)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _persistentVariables)
            {
                definedAstNodes.Add(item);
            }

            foreach (var item in _templates)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstRootNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstRootNode)targetItem;
            foreach (var item in _connections)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._connections.Add((VulcanEngine.IR.Ast.Connection.AstConnectionNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _tables)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._tables.Add((VulcanEngine.IR.Ast.Table.AstTableBaseNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _dimensions)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._dimensions.Add((VulcanEngine.IR.Ast.Dimension.AstDimensionNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _facts)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._facts.Add((VulcanEngine.IR.Ast.Fact.AstFactNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _packages)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._packages.Add((VulcanEngine.IR.Ast.Task.AstPackageBaseNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _schemas)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._schemas.Add((VulcanEngine.IR.Ast.Table.AstSchemaNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _principals)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._principals.Add((VulcanEngine.IR.Ast.Table.AstPrincipalNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _persistentVariables)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._persistentVariables.Add((VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            foreach (var item in _templates)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._templates.Add((VulcanEngine.IR.Ast.AstTemplateNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstRootNode(parentItem);
        }

        #endregion Cloning Support

        public bool RemoveRootNode(IFrameworkItem frameworkItem)
        {
            var localItemPrincipals = frameworkItem as VulcanEngine.IR.Ast.Table.AstPrincipalNode;
            if (localItemPrincipals != null) { return Principals.Remove(localItemPrincipals); }
            var localItemSchemas = frameworkItem as VulcanEngine.IR.Ast.Table.AstSchemaNode;
            if (localItemSchemas != null) { return Schemas.Remove(localItemSchemas); }
            var localItemTemplates = frameworkItem as VulcanEngine.IR.Ast.AstTemplateNode;
            if (localItemTemplates != null) { return Templates.Remove(localItemTemplates); }
            var localItemPersistentVariables = frameworkItem as VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode;
            if (localItemPersistentVariables != null) { return PersistentVariables.Remove(localItemPersistentVariables); }
            var localItemPackages = frameworkItem as VulcanEngine.IR.Ast.Task.AstPackageBaseNode;
            if (localItemPackages != null) { return Packages.Remove(localItemPackages); }
            var localItemConnections = frameworkItem as VulcanEngine.IR.Ast.Connection.AstConnectionNode;
            if (localItemConnections != null) { return Connections.Remove(localItemConnections); }
            var localItemDimensions = frameworkItem as VulcanEngine.IR.Ast.Dimension.AstDimensionNode;
            if (localItemDimensions != null) { return Dimensions.Remove(localItemDimensions); }
            var localItemFacts = frameworkItem as VulcanEngine.IR.Ast.Fact.AstFactNode;
            if (localItemFacts != null) { return Facts.Remove(localItemFacts); }
            var localItemTables = frameworkItem as VulcanEngine.IR.Ast.Table.AstTableBaseNode;
            if (localItemTables != null) { return Tables.Remove(localItemTables); }
            return false;
        }
        public bool IsRootCollection(object collection)
        {
            return (ReferenceEquals(collection, Connections))
            || (ReferenceEquals(collection, Tables))
            || (ReferenceEquals(collection, Dimensions))
            || (ReferenceEquals(collection, Facts))
            || (ReferenceEquals(collection, Packages))
            || (ReferenceEquals(collection, Schemas))
            || (ReferenceEquals(collection, Principals))
            || (ReferenceEquals(collection, PersistentVariables))
            || (ReferenceEquals(collection, Templates));
        }
        public bool IsRootCollectionObjectType(Type type)
        {
            return typeof(VulcanEngine.IR.Ast.Connection.AstConnectionNode) == type
            || typeof(VulcanEngine.IR.Ast.Table.AstTableBaseNode) == type
            || typeof(VulcanEngine.IR.Ast.Dimension.AstDimensionNode) == type
            || typeof(VulcanEngine.IR.Ast.Fact.AstFactNode) == type
            || typeof(VulcanEngine.IR.Ast.Task.AstPackageBaseNode) == type
            || typeof(VulcanEngine.IR.Ast.Table.AstSchemaNode) == type
            || typeof(VulcanEngine.IR.Ast.Table.AstPrincipalNode) == type
            || typeof(VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode) == type
            || typeof(VulcanEngine.IR.Ast.AstTemplateNode) == type;
        }
        public bool IsRootCollectionObject(IFrameworkItem frameworkItem)
        {
            return GetRootCollectionName(frameworkItem) != null;
        }
        public string GetRootCollectionName(IFrameworkItem frameworkItem)
        {
            if (frameworkItem is VulcanEngine.IR.Ast.Table.AstPrincipalNode) { return "Principals"; }
            if (frameworkItem is VulcanEngine.IR.Ast.Table.AstSchemaNode) { return "Schemas"; }
            if (frameworkItem is VulcanEngine.IR.Ast.AstTemplateNode) { return "Templates"; }
            if (frameworkItem is VulcanEngine.IR.Ast.PersistentVariables.AstPersistentVariableNode) { return "PersistentVariables"; }
            if (frameworkItem is VulcanEngine.IR.Ast.Task.AstPackageBaseNode) { return "Packages"; }
            if (frameworkItem is VulcanEngine.IR.Ast.Connection.AstConnectionNode) { return "Connections"; }
            if (frameworkItem is VulcanEngine.IR.Ast.Dimension.AstDimensionNode) { return "Dimensions"; }
            if (frameworkItem is VulcanEngine.IR.Ast.Fact.AstFactNode) { return "Facts"; }
            if (frameworkItem is VulcanEngine.IR.Ast.Table.AstTableBaseNode) { return "Tables"; }
            return null;
        }
public string RootItemXsdName { get { return "Vulcan"; } }

        public SymbolTable SymbolTable { get; private set; }

    }
}
