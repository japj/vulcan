//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Task
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("Container")]
    [AstSchemaTypeBindingAttribute("ContainerTaskElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstContainerTaskNode : VulcanEngine.IR.Ast.Task.AstContainerTaskBaseNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Log_BackingField;
        private bool _isLogExplicitlySet;

        private VulcanEngine.IR.Ast.Connection.AstConnectionNode _logConnection;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Task.ContainerTransactionMode TransactionMode_BackingField;
        private bool _isTransactionModeExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Task.ContainerConstraintMode ConstraintMode_BackingField;
        private bool _isConstraintModeExplicitlySet;

        private VulcanCollection<VulcanEngine.IR.Ast.Task.AstVariableNode> _variables;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [Browsable(true)]
        [AstXNameBinding("Log", ChildType.Attribute)]
        public System.Boolean Log
        {
            get { return Log_BackingField; }
            set
            {
                if (Log_BackingField != value)
                {
                    System.Boolean oldValue = Log_BackingField;
                    Log_BackingField = value;
                    VulcanOnPropertyChanged("Log", oldValue, Log_BackingField);
                    IsLogExplicitlySet = true;
                }
            }
        }

        public bool IsLogExplicitlySet
        {
            get { return _isLogExplicitlySet; }
            protected set
            {
                if (_isLogExplicitlySet != value)
                {
                    bool oldValue = _isLogExplicitlySet;
                    _isLogExplicitlySet = value;
                    VulcanOnPropertyChanged("IsLogExplicitlySet", oldValue, _isLogExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [Browsable(true)]
        [AstXNameBinding("LogConnectionName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Connection.AstConnectionNode LogConnection
        {
            get { return _logConnection; }
            set
            {
                if (_logConnection != value)
                {
                    if (_logConnection != null)
                    {
                        _logConnection.Unreference(this, "LogConnection");
                    }
                    VulcanEngine.IR.Ast.Connection.AstConnectionNode oldValue = _logConnection;
                    _logConnection = value;
                    if (_logConnection != null)
                    {
                        _logConnection.Reference(this, "LogConnection");
                    }
                    VulcanOnPropertyChanged("LogConnection", oldValue, _logConnection);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Task.ContainerTransactionMode.Join)]
        [Browsable(true)]
        [AstXNameBinding("TransactionMode", ChildType.Attribute, DefaultValue = "Join")]
        public VulcanEngine.IR.Ast.Task.ContainerTransactionMode TransactionMode
        {
            get { return TransactionMode_BackingField; }
            set
            {
                if (TransactionMode_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Task.ContainerTransactionMode oldValue = TransactionMode_BackingField;
                    TransactionMode_BackingField = value;
                    VulcanOnPropertyChanged("TransactionMode", oldValue, TransactionMode_BackingField);
                    IsTransactionModeExplicitlySet = true;
                }
            }
        }

        public bool IsTransactionModeExplicitlySet
        {
            get { return _isTransactionModeExplicitlySet; }
            protected set
            {
                if (_isTransactionModeExplicitlySet != value)
                {
                    bool oldValue = _isTransactionModeExplicitlySet;
                    _isTransactionModeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsTransactionModeExplicitlySet", oldValue, _isTransactionModeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Task.ContainerConstraintMode.Linear)]
        [Browsable(true)]
        [AstXNameBinding("ConstraintMode", ChildType.Attribute, DefaultValue = "Linear")]
        public VulcanEngine.IR.Ast.Task.ContainerConstraintMode ConstraintMode
        {
            get { return ConstraintMode_BackingField; }
            set
            {
                if (ConstraintMode_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Task.ContainerConstraintMode oldValue = ConstraintMode_BackingField;
                    ConstraintMode_BackingField = value;
                    VulcanOnPropertyChanged("ConstraintMode", oldValue, ConstraintMode_BackingField);
                    IsConstraintModeExplicitlySet = true;
                }
            }
        }

        public bool IsConstraintModeExplicitlySet
        {
            get { return _isConstraintModeExplicitlySet; }
            protected set
            {
                if (_isConstraintModeExplicitlySet != value)
                {
                    bool oldValue = _isConstraintModeExplicitlySet;
                    _isConstraintModeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsConstraintModeExplicitlySet", oldValue, _isConstraintModeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [Browsable(false)]
        [AstXNameBinding("Variable", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Task.AstVariableNode> Variables
        {
            get { return _variables; }
        }


        #endregion Public Accessor Properties

        #region Collection Methods




        private void _variables_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Task.AstVariableNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Variables", e);
        }

        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            TransactionMode_BackingField = VulcanEngine.IR.Ast.Task.ContainerTransactionMode.Join;
            ConstraintMode_BackingField = VulcanEngine.IR.Ast.Task.ContainerConstraintMode.Linear;
            _variables = new VulcanCollection<VulcanEngine.IR.Ast.Task.AstVariableNode>();
            _variables.CollectionChanged += _variables_CollectionChanged;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());




            foreach (var item in _variables)
            {
                definedAstNodes.Add(item);
            }

            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstContainerTaskNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstContainerTaskNode)targetItem;
            castedTargetItem.Log_BackingField = Log_BackingField;

            if (_logConnection == null)
            {
                castedTargetItem._logConnection = null;
            }
            else if (cloneMapping.ContainsKey(_logConnection))
            {
                castedTargetItem._logConnection = (VulcanEngine.IR.Ast.Connection.AstConnectionNode)cloneMapping[_logConnection];
            }
            else
            {
                castedTargetItem._logConnection = _logConnection;
            }

            castedTargetItem.TransactionMode_BackingField = TransactionMode_BackingField;

            castedTargetItem.ConstraintMode_BackingField = ConstraintMode_BackingField;

            foreach (var item in _variables)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._variables.Add((VulcanEngine.IR.Ast.Task.AstVariableNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstContainerTaskNode(parentItem);
        }

        #endregion Cloning Support


    }
}
