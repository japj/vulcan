//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Task
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("ExecuteSQLParameterMapping")]
    [AstSchemaTypeBindingAttribute("ExecuteSQLParameterMappingElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstExecuteSqlParameterMappingTypeNode : VulcanEngine.IR.Ast.Task.AstVariableParameterMappingNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Task.Direction Direction_BackingField;
        private bool __isNotFirstSet_Direction_BackingField;
        private bool _isDirectionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Int32 Length_BackingField;
        private bool _isLengthExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [VulcanDescription(@"Speficies whether the direction of the parameter is an input, an output, or a return value.")]
        [Browsable(true)]
        [AstXNameBinding("Direction", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Task.Direction Direction
        {
            get { return Direction_BackingField; }
            set
            {
                if (Direction_BackingField != value || !__isNotFirstSet_Direction_BackingField)
                {
                    __isNotFirstSet_Direction_BackingField = true;
                    VulcanEngine.IR.Ast.Task.Direction oldValue = Direction_BackingField;
                    Direction_BackingField = value;
                    VulcanOnPropertyChanged("Direction", oldValue, Direction_BackingField);
                    IsDirectionExplicitlySet = true;
                }
            }
        }

        public bool IsDirectionExplicitlySet
        {
            get { return _isDirectionExplicitlySet; }
            protected set
            {
                if (_isDirectionExplicitlySet != value)
                {
                    bool oldValue = _isDirectionExplicitlySet;
                    _isDirectionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDirectionExplicitlySet", oldValue, _isDirectionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [VulcanDefaultValue(0)]
        [VulcanDescription(@"Specifies the length of the mapped parameter value.  This property only applies to parameters that support a length modifier, such as string or binary types.")]
        [Browsable(true)]
        [AstXNameBinding("Length", ChildType.Attribute, DefaultValue = "0")]
        public System.Int32 Length
        {
            get { return Length_BackingField; }
            set
            {
                if (Length_BackingField != value)
                {
                    System.Int32 oldValue = Length_BackingField;
                    Length_BackingField = value;
                    VulcanOnPropertyChanged("Length", oldValue, Length_BackingField);
                    IsLengthExplicitlySet = true;
                }
            }
        }

        public bool IsLengthExplicitlySet
        {
            get { return _isLengthExplicitlySet; }
            protected set
            {
                if (_isLengthExplicitlySet != value)
                {
                    bool oldValue = _isLengthExplicitlySet;
                    _isLengthExplicitlySet = value;
                    VulcanOnPropertyChanged("IsLengthExplicitlySet", oldValue, _isLengthExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods


        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            Length_BackingField = 0;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());


            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstExecuteSqlParameterMappingTypeNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstExecuteSqlParameterMappingTypeNode)targetItem;
            castedTargetItem.Direction_BackingField = Direction_BackingField;

            castedTargetItem.Length_BackingField = Length_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstExecuteSqlParameterMappingTypeNode(parentItem);
        }

        #endregion Cloning Support


    }
}
