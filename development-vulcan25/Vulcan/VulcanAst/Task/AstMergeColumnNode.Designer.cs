//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Task
{
    [AstSchemaTypeBindingAttribute("MergeColumnElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstMergeColumnNode : VulcanEngine.IR.Ast.AstNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Task.MergeColumnUsage ColumnUsage_BackingField;
        private bool __isNotFirstSet_ColumnUsage_BackingField;
        private bool _isColumnUsageExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String ColumnName_BackingField;
        private bool __isNotFirstSet_ColumnName_BackingField;
        private bool _isColumnNameExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [AstRequiredProperty]
        [Browsable(true)]
        [AstXNameBinding("ColumnUsage", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Task.MergeColumnUsage ColumnUsage
        {
            get { return ColumnUsage_BackingField; }
            set
            {
                if (ColumnUsage_BackingField != value || !__isNotFirstSet_ColumnUsage_BackingField)
                {
                    __isNotFirstSet_ColumnUsage_BackingField = true;
                    VulcanEngine.IR.Ast.Task.MergeColumnUsage oldValue = ColumnUsage_BackingField;
                    ColumnUsage_BackingField = value;
                    VulcanOnPropertyChanged("ColumnUsage", oldValue, ColumnUsage_BackingField);
                    IsColumnUsageExplicitlySet = true;
                }
            }
        }

        public bool IsColumnUsageExplicitlySet
        {
            get { return _isColumnUsageExplicitlySet; }
            protected set
            {
                if (_isColumnUsageExplicitlySet != value)
                {
                    bool oldValue = _isColumnUsageExplicitlySet;
                    _isColumnUsageExplicitlySet = value;
                    VulcanOnPropertyChanged("IsColumnUsageExplicitlySet", oldValue, _isColumnUsageExplicitlySet);
                }
            }
        }


        [AstRequiredProperty]
        [Browsable(true)]
        [AstXNameBinding("ColumnName", ChildType.Attribute)]
        public System.String ColumnName
        {
            get { return ColumnName_BackingField; }
            set
            {
                if (ColumnName_BackingField != value || !__isNotFirstSet_ColumnName_BackingField)
                {
                    __isNotFirstSet_ColumnName_BackingField = true;
                    System.String oldValue = ColumnName_BackingField;
                    ColumnName_BackingField = value;
                    VulcanOnPropertyChanged("ColumnName", oldValue, ColumnName_BackingField);
                    IsColumnNameExplicitlySet = true;
                }
            }
        }

        public bool IsColumnNameExplicitlySet
        {
            get { return _isColumnNameExplicitlySet; }
            protected set
            {
                if (_isColumnNameExplicitlySet != value)
                {
                    bool oldValue = _isColumnNameExplicitlySet;
                    _isColumnNameExplicitlySet = value;
                    VulcanOnPropertyChanged("IsColumnNameExplicitlySet", oldValue, _isColumnNameExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods


        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());


            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstMergeColumnNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstMergeColumnNode)targetItem;
            castedTargetItem.ColumnUsage_BackingField = ColumnUsage_BackingField;

            castedTargetItem.ColumnName_BackingField = ColumnName_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstMergeColumnNode(parentItem);
        }

        #endregion Cloning Support


    }
}
