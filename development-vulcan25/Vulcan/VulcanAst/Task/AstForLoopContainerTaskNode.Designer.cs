//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Task
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [FriendlyNameAttribute("ForLoop")]
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstForLoopContainerTaskNode : VulcanEngine.IR.Ast.Task.AstContainerTaskNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String InitializerExpression_BackingField;
        private bool _isInitializerExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String LoopTestExpression_BackingField;
        private bool __isNotFirstSet_LoopTestExpression_BackingField;
        private bool _isLoopTestExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String CountingExpression_BackingField;
        private bool _isCountingExpressionExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [Browsable(false)]
        [AstXNameBinding("InitializerExpression", ChildType.ChildDefinition)]
        public System.String InitializerExpression
        {
            get { return InitializerExpression_BackingField; }
            set
            {
                if (InitializerExpression_BackingField != value)
                {
                    System.String oldValue = InitializerExpression_BackingField;
                    InitializerExpression_BackingField = value;
                    VulcanOnPropertyChanged("InitializerExpression", oldValue, InitializerExpression_BackingField);
                    IsInitializerExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsInitializerExpressionExplicitlySet
        {
            get { return _isInitializerExpressionExplicitlySet; }
            protected set
            {
                if (_isInitializerExpressionExplicitlySet != value)
                {
                    bool oldValue = _isInitializerExpressionExplicitlySet;
                    _isInitializerExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsInitializerExpressionExplicitlySet", oldValue, _isInitializerExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Required")]
        [AstRequiredProperty]
        [Browsable(false)]
        [AstXNameBinding("LoopTestExpression", ChildType.ChildDefinition)]
        public System.String LoopTestExpression
        {
            get { return LoopTestExpression_BackingField; }
            set
            {
                if (LoopTestExpression_BackingField != value || !__isNotFirstSet_LoopTestExpression_BackingField)
                {
                    __isNotFirstSet_LoopTestExpression_BackingField = true;
                    System.String oldValue = LoopTestExpression_BackingField;
                    LoopTestExpression_BackingField = value;
                    VulcanOnPropertyChanged("LoopTestExpression", oldValue, LoopTestExpression_BackingField);
                    IsLoopTestExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsLoopTestExpressionExplicitlySet
        {
            get { return _isLoopTestExpressionExplicitlySet; }
            protected set
            {
                if (_isLoopTestExpressionExplicitlySet != value)
                {
                    bool oldValue = _isLoopTestExpressionExplicitlySet;
                    _isLoopTestExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsLoopTestExpressionExplicitlySet", oldValue, _isLoopTestExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [Browsable(false)]
        [AstXNameBinding("CountingExpression", ChildType.ChildDefinition)]
        public System.String CountingExpression
        {
            get { return CountingExpression_BackingField; }
            set
            {
                if (CountingExpression_BackingField != value)
                {
                    System.String oldValue = CountingExpression_BackingField;
                    CountingExpression_BackingField = value;
                    VulcanOnPropertyChanged("CountingExpression", oldValue, CountingExpression_BackingField);
                    IsCountingExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsCountingExpressionExplicitlySet
        {
            get { return _isCountingExpressionExplicitlySet; }
            protected set
            {
                if (_isCountingExpressionExplicitlySet != value)
                {
                    bool oldValue = _isCountingExpressionExplicitlySet;
                    _isCountingExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCountingExpressionExplicitlySet", oldValue, _isCountingExpressionExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods



        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());



            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstForLoopContainerTaskNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstForLoopContainerTaskNode)targetItem;
            castedTargetItem.InitializerExpression_BackingField = InitializerExpression_BackingField;

            castedTargetItem.LoopTestExpression_BackingField = LoopTestExpression_BackingField;

            castedTargetItem.CountingExpression_BackingField = CountingExpression_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstForLoopContainerTaskNode(parentItem);
        }

        #endregion Cloning Support


    }
}
