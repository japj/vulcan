//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Task
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance")]
    [AstDoNotEmitXmlSchemaTypeAttribute]
    [AstSchemaTypeBindingAttribute("", "http://tempuri.org/vulcan2.xsd")]
    public abstract partial class AstTaskNode : VulcanEngine.IR.Ast.AstScopeBoundaryNode
    {
        #region Private Storage
        private VulcanEngine.IR.Ast.Task.AstTaskflowPrecedenceConstraintsNode _precedenceConstraints;

        private VulcanCollection<VulcanEngine.IR.Ast.Task.AstTaskEventHandlerNode> _events;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean DelayValidation_BackingField;
        private bool _isDelayValidationExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Task.IsolationLevel IsolationLevel_BackingField;
        private bool _isIsolationLevelExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDescription(@"")]
        [Browsable(false)]
        [AstXNameBinding("PrecedenceConstraints", ChildType.ChildDefinition)]
        public VulcanEngine.IR.Ast.Task.AstTaskflowPrecedenceConstraintsNode PrecedenceConstraints
        {
            get { return _precedenceConstraints; }
            set
            {
                if (_precedenceConstraints != value)
                {
                    VulcanEngine.IR.Ast.Task.AstTaskflowPrecedenceConstraintsNode oldValue = _precedenceConstraints;
                    _precedenceConstraints = value;
                    VulcanOnPropertyChanged("PrecedenceConstraints", oldValue, _precedenceConstraints);
                }
            }
        }


        [VulcanCategory("Read Only")]
        [Browsable(false)]
        [AstXNameBinding("Event", ChildType.ListChildDefinition)]
        public VulcanCollection<VulcanEngine.IR.Ast.Task.AstTaskEventHandlerNode> Events
        {
            get { return _events; }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(false)]
        [Browsable(true)]
        [AstXNameBinding("DelayValidation", ChildType.Attribute, DefaultValue = "false")]
        public System.Boolean DelayValidation
        {
            get { return DelayValidation_BackingField; }
            set
            {
                if (DelayValidation_BackingField != value)
                {
                    System.Boolean oldValue = DelayValidation_BackingField;
                    DelayValidation_BackingField = value;
                    VulcanOnPropertyChanged("DelayValidation", oldValue, DelayValidation_BackingField);
                    IsDelayValidationExplicitlySet = true;
                }
            }
        }

        public bool IsDelayValidationExplicitlySet
        {
            get { return _isDelayValidationExplicitlySet; }
            protected set
            {
                if (_isDelayValidationExplicitlySet != value)
                {
                    bool oldValue = _isDelayValidationExplicitlySet;
                    _isDelayValidationExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDelayValidationExplicitlySet", oldValue, _isDelayValidationExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Task.IsolationLevel.Serializable)]
        [VulcanDescription(@"Sets the Isolation Level which controls how Transactions behave for this container.")]
        [Browsable(true)]
        [AstXNameBinding("IsolationLevel", ChildType.Attribute, DefaultValue = "Serializable")]
        public VulcanEngine.IR.Ast.Task.IsolationLevel IsolationLevel
        {
            get { return IsolationLevel_BackingField; }
            set
            {
                if (IsolationLevel_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Task.IsolationLevel oldValue = IsolationLevel_BackingField;
                    IsolationLevel_BackingField = value;
                    VulcanOnPropertyChanged("IsolationLevel", oldValue, IsolationLevel_BackingField);
                    IsIsolationLevelExplicitlySet = true;
                }
            }
        }

        public bool IsIsolationLevelExplicitlySet
        {
            get { return _isIsolationLevelExplicitlySet; }
            protected set
            {
                if (_isIsolationLevelExplicitlySet != value)
                {
                    bool oldValue = _isIsolationLevelExplicitlySet;
                    _isIsolationLevelExplicitlySet = value;
                    VulcanOnPropertyChanged("IsIsolationLevelExplicitlySet", oldValue, _isIsolationLevelExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods

        private void _events_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            VulcanEngine.IR.Ast.Task.AstTaskEventHandlerNode.ProcessAstNamedNodeCollectionAction(e);
            VulcanOnCollectionPropertyChanged("Events", e);
        }



        #endregion Collection Methods

        #region Initialization
        private void InitializeAstNode()
        {
            _events = new VulcanCollection<VulcanEngine.IR.Ast.Task.AstTaskEventHandlerNode>();
            _events.CollectionChanged += _events_CollectionChanged;
            DelayValidation_BackingField = false;
            IsolationLevel_BackingField = VulcanEngine.IR.Ast.Task.IsolationLevel.Serializable;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());
            if (_precedenceConstraints != null)
            {
                definedAstNodes.Add(_precedenceConstraints);
            }

            foreach (var item in _events)
            {
                definedAstNodes.Add(item);
            }



            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstTaskNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstTaskNode)targetItem;
            if (_precedenceConstraints == null)
            {
                castedTargetItem._precedenceConstraints = null;
            }
            else if (cloneMapping.ContainsKey(_precedenceConstraints))
            {
                castedTargetItem._precedenceConstraints = (VulcanEngine.IR.Ast.Task.AstTaskflowPrecedenceConstraintsNode)cloneMapping[_precedenceConstraints];
                _precedenceConstraints.CloneInto(cloneMapping[_precedenceConstraints], cloneMapping);
            }
            else
            {
                castedTargetItem._precedenceConstraints = _precedenceConstraints;
            }

            foreach (var item in _events)
            {
                IFrameworkItem candidate = cloneMapping[item];
                castedTargetItem._events.Add((VulcanEngine.IR.Ast.Task.AstTaskEventHandlerNode)candidate);
                item.CloneInto(candidate, cloneMapping);
            }

            castedTargetItem.DelayValidation_BackingField = DelayValidation_BackingField;

            castedTargetItem.IsolationLevel_BackingField = IsolationLevel_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            throw new NotSupportedException("Cannot clone abstract IFrameworkElement class.  You are missing a Clone method on a non-abstract derived type.");
        }

        #endregion Cloning Support


    }
}
