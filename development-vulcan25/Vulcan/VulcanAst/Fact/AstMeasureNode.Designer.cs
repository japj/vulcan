//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Varigence Ast Designer tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.  Do not edit this file unless you know exactly
//     you are doing and are synchronized with the Vulcan development team.
//
//     For more information about the Varigence Ast Designer tool, email
//     support@varigence.com.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Specialized;
using Vulcan.Utility.ComponentModel;
using AstFramework;
using AstFramework.Engine.Binding;
using AstFramework.Model;
using AstFramework.Markup;
using VulcanEngine.AstFramework;
using Vulcan.Utility.Collections;
using System.Reflection;
using System.Collections.Generic;
using Vulcan.Utility.Xml;
using Vulcan.Utility.Common;
using Vulcan.Utility.Markup;

namespace VulcanEngine.IR.Ast.Fact
{
    [FriendlyNameAttribute("Measure")]
    [AstSchemaTypeBindingAttribute("MeasureElemType", "http://tempuri.org/vulcan2.xsd")]
    public partial class AstMeasureNode : VulcanEngine.IR.Ast.AstNamedNode
    {
        #region Private Storage
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.Boolean Visible_BackingField;
        private bool _isVisibleExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String Expression_BackingField;
        private bool _isExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String ForeColorExpression_BackingField;
        private bool _isForeColorExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String BackColorExpression_BackingField;
        private bool _isBackColorExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String FontSizeExpression_BackingField;
        private bool _isFontSizeExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String FontFlagsExpression_BackingField;
        private bool _isFontFlagsExpressionExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasDataMimeType DataMimeType_BackingField;
        private bool _isDataMimeTypeExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasDataFormat DataFormat_BackingField;
        private bool _isDataFormatExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasCollation Collation_BackingField;
        private bool _isCollationExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasTrimming Trimming_BackingField;
        private bool _isTrimmingExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasInvalidXmlCharacterProcessing InvalidXmlCharacterProcessing_BackingField;
        private bool _isInvalidXmlCharacterProcessingExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasNullProcessing NullProcessing_BackingField;
        private bool _isNullProcessingExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasMeasureFormat MeasureFormat_BackingField;
        private bool _isMeasureFormatExplicitlySet;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected System.String DisplayFolder_BackingField;
        private bool _isDisplayFolderExplicitlySet;

        private VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode _aggregateColumn;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected VulcanEngine.IR.Ast.Cube.SsasAggregationFunction AggregateFunction_BackingField;
        private bool _isAggregateFunctionExplicitlySet;

        #endregion Private Storage

        #region Public Accessor Properties
        [VulcanCategory("Optional")]
        [VulcanDefaultValue(true)]
        [VulcanDescription(@"Specifies the visibility of the parent element.")]
        [Browsable(true)]
        [AstXNameBinding("Visible", ChildType.Attribute, DefaultValue = "true")]
        public System.Boolean Visible
        {
            get { return Visible_BackingField; }
            set
            {
                if (Visible_BackingField != value)
                {
                    System.Boolean oldValue = Visible_BackingField;
                    Visible_BackingField = value;
                    VulcanOnPropertyChanged("Visible", oldValue, Visible_BackingField);
                    IsVisibleExplicitlySet = true;
                }
            }
        }

        public bool IsVisibleExplicitlySet
        {
            get { return _isVisibleExplicitlySet; }
            protected set
            {
                if (_isVisibleExplicitlySet != value)
                {
                    bool oldValue = _isVisibleExplicitlySet;
                    _isVisibleExplicitlySet = value;
                    VulcanOnPropertyChanged("IsVisibleExplicitlySet", oldValue, _isVisibleExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Contains an MDX expression that specifies the contents of the parent element.")]
        [Browsable(true)]
        [AstXNameBinding("Expression", ChildType.ChildDefinition)]
        public System.String Expression
        {
            get { return Expression_BackingField; }
            set
            {
                if (Expression_BackingField != value)
                {
                    System.String oldValue = Expression_BackingField;
                    Expression_BackingField = value;
                    VulcanOnPropertyChanged("Expression", oldValue, Expression_BackingField);
                    IsExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsExpressionExplicitlySet
        {
            get { return _isExpressionExplicitlySet; }
            protected set
            {
                if (_isExpressionExplicitlySet != value)
                {
                    bool oldValue = _isExpressionExplicitlySet;
                    _isExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsExpressionExplicitlySet", oldValue, _isExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the color-related display properties of the CalculationProperty or Measure parent element.")]
        [Browsable(true)]
        [AstXNameBinding("ForeColorExpression", ChildType.Attribute)]
        public System.String ForeColorExpression
        {
            get { return ForeColorExpression_BackingField; }
            set
            {
                if (ForeColorExpression_BackingField != value)
                {
                    System.String oldValue = ForeColorExpression_BackingField;
                    ForeColorExpression_BackingField = value;
                    VulcanOnPropertyChanged("ForeColorExpression", oldValue, ForeColorExpression_BackingField);
                    IsForeColorExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsForeColorExpressionExplicitlySet
        {
            get { return _isForeColorExpressionExplicitlySet; }
            protected set
            {
                if (_isForeColorExpressionExplicitlySet != value)
                {
                    bool oldValue = _isForeColorExpressionExplicitlySet;
                    _isForeColorExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsForeColorExpressionExplicitlySet", oldValue, _isForeColorExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the color-related display properties of the CalculationProperty parent element.")]
        [Browsable(true)]
        [AstXNameBinding("BackColorExpression", ChildType.Attribute)]
        public System.String BackColorExpression
        {
            get { return BackColorExpression_BackingField; }
            set
            {
                if (BackColorExpression_BackingField != value)
                {
                    System.String oldValue = BackColorExpression_BackingField;
                    BackColorExpression_BackingField = value;
                    VulcanOnPropertyChanged("BackColorExpression", oldValue, BackColorExpression_BackingField);
                    IsBackColorExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsBackColorExpressionExplicitlySet
        {
            get { return _isBackColorExpressionExplicitlySet; }
            protected set
            {
                if (_isBackColorExpressionExplicitlySet != value)
                {
                    bool oldValue = _isBackColorExpressionExplicitlySet;
                    _isBackColorExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsBackColorExpressionExplicitlySet", oldValue, _isBackColorExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the font-related display properties of the CalculationProperty or Measure parent element.")]
        [Browsable(true)]
        [AstXNameBinding("FontSizeExpression", ChildType.Attribute)]
        public System.String FontSizeExpression
        {
            get { return FontSizeExpression_BackingField; }
            set
            {
                if (FontSizeExpression_BackingField != value)
                {
                    System.String oldValue = FontSizeExpression_BackingField;
                    FontSizeExpression_BackingField = value;
                    VulcanOnPropertyChanged("FontSizeExpression", oldValue, FontSizeExpression_BackingField);
                    IsFontSizeExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsFontSizeExpressionExplicitlySet
        {
            get { return _isFontSizeExpressionExplicitlySet; }
            protected set
            {
                if (_isFontSizeExpressionExplicitlySet != value)
                {
                    bool oldValue = _isFontSizeExpressionExplicitlySet;
                    _isFontSizeExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsFontSizeExpressionExplicitlySet", oldValue, _isFontSizeExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the font-related display characteristics of the CalculationProperty or Measure parent element.")]
        [Browsable(true)]
        [AstXNameBinding("FontFlagsExpression", ChildType.Attribute)]
        public System.String FontFlagsExpression
        {
            get { return FontFlagsExpression_BackingField; }
            set
            {
                if (FontFlagsExpression_BackingField != value)
                {
                    System.String oldValue = FontFlagsExpression_BackingField;
                    FontFlagsExpression_BackingField = value;
                    VulcanOnPropertyChanged("FontFlagsExpression", oldValue, FontFlagsExpression_BackingField);
                    IsFontFlagsExpressionExplicitlySet = true;
                }
            }
        }

        public bool IsFontFlagsExpressionExplicitlySet
        {
            get { return _isFontFlagsExpressionExplicitlySet; }
            protected set
            {
                if (_isFontFlagsExpressionExplicitlySet != value)
                {
                    bool oldValue = _isFontFlagsExpressionExplicitlySet;
                    _isFontFlagsExpressionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsFontFlagsExpressionExplicitlySet", oldValue, _isFontFlagsExpressionExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Where applicable, specifies the Multipurpose Internet Mail Extensions (MIME) type of the data represented by the DataItem element.")]
        [Browsable(true)]
        [AstXNameBinding("DataMimeType", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Cube.SsasDataMimeType DataMimeType
        {
            get { return DataMimeType_BackingField; }
            set
            {
                if (DataMimeType_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasDataMimeType oldValue = DataMimeType_BackingField;
                    DataMimeType_BackingField = value;
                    VulcanOnPropertyChanged("DataMimeType", oldValue, DataMimeType_BackingField);
                    IsDataMimeTypeExplicitlySet = true;
                }
            }
        }

        public bool IsDataMimeTypeExplicitlySet
        {
            get { return _isDataMimeTypeExplicitlySet; }
            protected set
            {
                if (_isDataMimeTypeExplicitlySet != value)
                {
                    bool oldValue = _isDataMimeTypeExplicitlySet;
                    _isDataMimeTypeExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDataMimeTypeExplicitlySet", oldValue, _isDataMimeTypeExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the formatting requirements of the DataItem element. The default setting is �none.� Allowed settings are Microsoft Excel formats and the string values TrimRight, TrimLeft, TrimAll, and TrimNone.")]
        [Browsable(true)]
        [AstXNameBinding("DataFormat", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Cube.SsasDataFormat DataFormat
        {
            get { return DataFormat_BackingField; }
            set
            {
                if (DataFormat_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasDataFormat oldValue = DataFormat_BackingField;
                    DataFormat_BackingField = value;
                    VulcanOnPropertyChanged("DataFormat", oldValue, DataFormat_BackingField);
                    IsDataFormatExplicitlySet = true;
                }
            }
        }

        public bool IsDataFormatExplicitlySet
        {
            get { return _isDataFormatExplicitlySet; }
            protected set
            {
                if (_isDataFormatExplicitlySet != value)
                {
                    bool oldValue = _isDataFormatExplicitlySet;
                    _isDataFormatExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDataFormatExplicitlySet", oldValue, _isDataFormatExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the collation method used by the parent element.")]
        [Browsable(true)]
        [AstXNameBinding("Collation", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Cube.SsasCollation Collation
        {
            get { return Collation_BackingField; }
            set
            {
                if (Collation_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasCollation oldValue = Collation_BackingField;
                    Collation_BackingField = value;
                    VulcanOnPropertyChanged("Collation", oldValue, Collation_BackingField);
                    IsCollationExplicitlySet = true;
                }
            }
        }

        public bool IsCollationExplicitlySet
        {
            get { return _isCollationExplicitlySet; }
            protected set
            {
                if (_isCollationExplicitlySet != value)
                {
                    bool oldValue = _isCollationExplicitlySet;
                    _isCollationExplicitlySet = value;
                    VulcanOnPropertyChanged("IsCollationExplicitlySet", oldValue, _isCollationExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Cube.SsasTrimming.None)]
        [VulcanDescription(@"Specifies how data from the data source is trimmed. The default setting is Right. Other allowed settings are Left, RightLeft and None.")]
        [Browsable(true)]
        [AstXNameBinding("Trimming", ChildType.Attribute, DefaultValue = "None")]
        public VulcanEngine.IR.Ast.Cube.SsasTrimming Trimming
        {
            get { return Trimming_BackingField; }
            set
            {
                if (Trimming_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasTrimming oldValue = Trimming_BackingField;
                    Trimming_BackingField = value;
                    VulcanOnPropertyChanged("Trimming", oldValue, Trimming_BackingField);
                    IsTrimmingExplicitlySet = true;
                }
            }
        }

        public bool IsTrimmingExplicitlySet
        {
            get { return _isTrimmingExplicitlySet; }
            protected set
            {
                if (_isTrimmingExplicitlySet != value)
                {
                    bool oldValue = _isTrimmingExplicitlySet;
                    _isTrimmingExplicitlySet = value;
                    VulcanOnPropertyChanged("IsTrimmingExplicitlySet", oldValue, _isTrimmingExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Determines how invalid XML characters in the source data will be handled. Preserve retains the character, Remove deletes them, and Replace inserts the (?) in the place of each invalid character.")]
        [Browsable(true)]
        [AstXNameBinding("InvalidXmlCharacterProcessing", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Cube.SsasInvalidXmlCharacterProcessing InvalidXmlCharacterProcessing
        {
            get { return InvalidXmlCharacterProcessing_BackingField; }
            set
            {
                if (InvalidXmlCharacterProcessing_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasInvalidXmlCharacterProcessing oldValue = InvalidXmlCharacterProcessing_BackingField;
                    InvalidXmlCharacterProcessing_BackingField = value;
                    VulcanOnPropertyChanged("InvalidXmlCharacterProcessing", oldValue, InvalidXmlCharacterProcessing_BackingField);
                    IsInvalidXmlCharacterProcessingExplicitlySet = true;
                }
            }
        }

        public bool IsInvalidXmlCharacterProcessingExplicitlySet
        {
            get { return _isInvalidXmlCharacterProcessingExplicitlySet; }
            protected set
            {
                if (_isInvalidXmlCharacterProcessingExplicitlySet != value)
                {
                    bool oldValue = _isInvalidXmlCharacterProcessingExplicitlySet;
                    _isInvalidXmlCharacterProcessingExplicitlySet = value;
                    VulcanOnPropertyChanged("IsInvalidXmlCharacterProcessingExplicitlySet", oldValue, _isInvalidXmlCharacterProcessingExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies how null values will be processed. The default setting is Automatic. Other allowed settings are Preserve (which preserves the null value), Error (which generates a null key error, UnknownMember (which generates an unknown member as well as a null conversion error) and ZeroOrBlank (which converts the null value to zero in numeric data items, and a blank string in string data items).")]
        [Browsable(true)]
        [AstXNameBinding("NullProcessing", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Cube.SsasNullProcessing NullProcessing
        {
            get { return NullProcessing_BackingField; }
            set
            {
                if (NullProcessing_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasNullProcessing oldValue = NullProcessing_BackingField;
                    NullProcessing_BackingField = value;
                    VulcanOnPropertyChanged("NullProcessing", oldValue, NullProcessing_BackingField);
                    IsNullProcessingExplicitlySet = true;
                }
            }
        }

        public bool IsNullProcessingExplicitlySet
        {
            get { return _isNullProcessingExplicitlySet; }
            protected set
            {
                if (_isNullProcessingExplicitlySet != value)
                {
                    bool oldValue = _isNullProcessingExplicitlySet;
                    _isNullProcessingExplicitlySet = value;
                    VulcanOnPropertyChanged("IsNullProcessingExplicitlySet", oldValue, _isNullProcessingExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies how the data item will be displayed. Allowed values include percent, decimal, comma separated digits, and arbitrary format string.")]
        [Browsable(true)]
        [AstXNameBinding("MeasureFormat", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Cube.SsasMeasureFormat MeasureFormat
        {
            get { return MeasureFormat_BackingField; }
            set
            {
                if (MeasureFormat_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasMeasureFormat oldValue = MeasureFormat_BackingField;
                    MeasureFormat_BackingField = value;
                    VulcanOnPropertyChanged("MeasureFormat", oldValue, MeasureFormat_BackingField);
                    IsMeasureFormatExplicitlySet = true;
                }
            }
        }

        public bool IsMeasureFormatExplicitlySet
        {
            get { return _isMeasureFormatExplicitlySet; }
            protected set
            {
                if (_isMeasureFormatExplicitlySet != value)
                {
                    bool oldValue = _isMeasureFormatExplicitlySet;
                    _isMeasureFormatExplicitlySet = value;
                    VulcanOnPropertyChanged("IsMeasureFormatExplicitlySet", oldValue, _isMeasureFormatExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDescription(@"Specifies the folder in which the parent element is listed. The default setting is None.")]
        [Browsable(true)]
        [AstXNameBinding("DisplayFolder", ChildType.Attribute)]
        public System.String DisplayFolder
        {
            get { return DisplayFolder_BackingField; }
            set
            {
                if (DisplayFolder_BackingField != value)
                {
                    System.String oldValue = DisplayFolder_BackingField;
                    DisplayFolder_BackingField = value;
                    VulcanOnPropertyChanged("DisplayFolder", oldValue, DisplayFolder_BackingField);
                    IsDisplayFolderExplicitlySet = true;
                }
            }
        }

        public bool IsDisplayFolderExplicitlySet
        {
            get { return _isDisplayFolderExplicitlySet; }
            protected set
            {
                if (_isDisplayFolderExplicitlySet != value)
                {
                    bool oldValue = _isDisplayFolderExplicitlySet;
                    _isDisplayFolderExplicitlySet = value;
                    VulcanOnPropertyChanged("IsDisplayFolderExplicitlySet", oldValue, _isDisplayFolderExplicitlySet);
                }
            }
        }


        [VulcanCategory("Optional")]
        [Browsable(false)]
        [AstXNameBinding("AggregateColumnName", ChildType.Attribute)]
        public VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode AggregateColumn
        {
            get { return _aggregateColumn; }
            set
            {
                if (_aggregateColumn != value)
                {
                    if (_aggregateColumn != null)
                    {
                        _aggregateColumn.Unreference(this, "AggregateColumn");
                    }
                    VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode oldValue = _aggregateColumn;
                    _aggregateColumn = value;
                    if (_aggregateColumn != null)
                    {
                        _aggregateColumn.Reference(this, "AggregateColumn");
                    }
                    VulcanOnPropertyChanged("AggregateColumn", oldValue, _aggregateColumn);
                }
            }
        }


        [VulcanCategory("Optional")]
        [VulcanDefaultValue(VulcanEngine.IR.Ast.Cube.SsasAggregationFunction.Sum)]
        [Browsable(true)]
        [AstXNameBinding("AggregateFunction", ChildType.Attribute, DefaultValue = "Sum")]
        public VulcanEngine.IR.Ast.Cube.SsasAggregationFunction AggregateFunction
        {
            get { return AggregateFunction_BackingField; }
            set
            {
                if (AggregateFunction_BackingField != value)
                {
                    VulcanEngine.IR.Ast.Cube.SsasAggregationFunction oldValue = AggregateFunction_BackingField;
                    AggregateFunction_BackingField = value;
                    VulcanOnPropertyChanged("AggregateFunction", oldValue, AggregateFunction_BackingField);
                    IsAggregateFunctionExplicitlySet = true;
                }
            }
        }

        public bool IsAggregateFunctionExplicitlySet
        {
            get { return _isAggregateFunctionExplicitlySet; }
            protected set
            {
                if (_isAggregateFunctionExplicitlySet != value)
                {
                    bool oldValue = _isAggregateFunctionExplicitlySet;
                    _isAggregateFunctionExplicitlySet = value;
                    VulcanOnPropertyChanged("IsAggregateFunctionExplicitlySet", oldValue, _isAggregateFunctionExplicitlySet);
                }
            }
        }


        #endregion Public Accessor Properties

        #region Collection Methods
















        #endregion Collection Methods

        #region Initialization
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        private void InitializeAstNode()
        {
            Visible_BackingField = true;
            Trimming_BackingField = VulcanEngine.IR.Ast.Cube.SsasTrimming.None;
            AggregateFunction_BackingField = VulcanEngine.IR.Ast.Cube.SsasAggregationFunction.Sum;
        }

        #endregion Initialization

        public override VulcanCollection<IFrameworkItem> DefinedAstNodes()
        {
            var definedAstNodes = new VulcanCollection<IFrameworkItem>();
            definedAstNodes.AddRange(base.DefinedAstNodes());
















            return definedAstNodes;
        }


        public override IEnumerable<IScopeBoundary> BindingScopeBoundaries()
        {
            var bindingScopeBoundaries = new List<IScopeBoundary>();
            bindingScopeBoundaries.Add(ScopeBoundary);
            return bindingScopeBoundaries;
        }


        #region Cloning Support
        public override IFrameworkItem Clone()
        {
            return Clone(ParentItem);
        }

        public override IFrameworkItem Clone(Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            return Clone(ParentItem, cloneMapping);
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem)
        {
            return Clone(parentItem, new Dictionary<IFrameworkItem, IFrameworkItem>());
        }

        public override IFrameworkItem Clone(IFrameworkItem parentItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            SymbolTable.GetSourceToCloneDefinitionMappings(this, parentItem, cloneMapping);
            CloneInto(cloneMapping[this], cloneMapping);
            return cloneMapping[this];
        }

        public override void CloneInto(IFrameworkItem targetItem, Dictionary<IFrameworkItem, IFrameworkItem> cloneMapping)
        {
            base.CloneInto(targetItem, cloneMapping);
            if (targetItem == null || !typeof(AstMeasureNode).IsAssignableFrom(targetItem.GetType()))
            {
                throw new ArgumentException("Provided target node is not of the correct type.");
            }
            var castedTargetItem = (AstMeasureNode)targetItem;
            castedTargetItem.Visible_BackingField = Visible_BackingField;

            castedTargetItem.Expression_BackingField = Expression_BackingField;

            castedTargetItem.ForeColorExpression_BackingField = ForeColorExpression_BackingField;

            castedTargetItem.BackColorExpression_BackingField = BackColorExpression_BackingField;

            castedTargetItem.FontSizeExpression_BackingField = FontSizeExpression_BackingField;

            castedTargetItem.FontFlagsExpression_BackingField = FontFlagsExpression_BackingField;

            castedTargetItem.DataMimeType_BackingField = DataMimeType_BackingField;

            castedTargetItem.DataFormat_BackingField = DataFormat_BackingField;

            castedTargetItem.Collation_BackingField = Collation_BackingField;

            castedTargetItem.Trimming_BackingField = Trimming_BackingField;

            castedTargetItem.InvalidXmlCharacterProcessing_BackingField = InvalidXmlCharacterProcessing_BackingField;

            castedTargetItem.NullProcessing_BackingField = NullProcessing_BackingField;

            castedTargetItem.MeasureFormat_BackingField = MeasureFormat_BackingField;

            castedTargetItem.DisplayFolder_BackingField = DisplayFolder_BackingField;

            if (_aggregateColumn == null)
            {
                castedTargetItem._aggregateColumn = null;
            }
            else if (cloneMapping.ContainsKey(_aggregateColumn))
            {
                castedTargetItem._aggregateColumn = (VulcanEngine.IR.Ast.Table.AstTableColumnBaseNode)cloneMapping[_aggregateColumn];
            }
            else
            {
                castedTargetItem._aggregateColumn = _aggregateColumn;
            }

            castedTargetItem.AggregateFunction_BackingField = AggregateFunction_BackingField;

        }

        public override IFrameworkItem CloneHusk(IFrameworkItem parentItem)
        {
            return new AstMeasureNode(parentItem);
        }

        #endregion Cloning Support


    }
}
