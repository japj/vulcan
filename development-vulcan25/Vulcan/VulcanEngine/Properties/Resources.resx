<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorAttemptedWorkflowDuplicateIRFlowVector" xml:space="preserve">
    <value>Attempted to create a duplicate IR Flow Vector: {0} -&gt; {1}</value>
    <comment>0 = Source Workflow Unique Phase Name, 1 = Sink Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorAttemptedWorkflowDuplicatename" xml:space="preserve">
    <value>Attempted to create multiple Vulcan Phase Workflows with the same name</value>
    <comment>0 = Workflow Name</comment>
  </data>
  <data name="ErrorAttemptedWorkflowDuplicateUniquePhaseName" xml:space="preserve">
    <value>Attempted to add a phase with a duplicate workflow unique phase name: {0}</value>
    <comment>0 = Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorAttemptedWorkflowSelfLoop" xml:space="preserve">
    <value>Attempted to create workflow self-loop on phase: {0}</value>
    <comment>0 = Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorAttemptedWorkflowSupplyDuplicatePhaseIR" xml:space="preserve">
    <value>Attempted to supply duplicate IR along a Phase IR Flow Vector: {0} -&gt; {1}</value>
    <comment>0 = Source Workflow Unique Phase Name, 1 = Sink Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorDuplicatePhaseFriendlyNameFound" xml:space="preserve">
    <value>A duplicate phase friendly name was found: {0}</value>
    <comment>0 = duplicate name</comment>
  </data>
  <data name="ErrorDuplicatePhaseParameterSpecified" xml:space="preserve">
    <value>A Duplicate Phase Parameter Was Specified: {0} , {1}</value>
    <comment>0 = Workflow Unique Phase Name, 1 = Parameter Name</comment>
  </data>
  <data name="ErrorInvalidPhaseParameterType" xml:space="preserve">
    <value>Invalid Phase Parameter Type Specified: {0} , {1}</value>
    <comment>0 = Workflow Unique Phase Name, 1 = Parameter Name</comment>
  </data>
  <data name="ErrorInvalidWorkflowDefaultName" xml:space="preserve">
    <value>The specified default Vulcan Phase Workflow does not exist</value>
    <comment>0 = Workflow Name</comment>
  </data>
  <data name="ErrorInvalidWorkflowPhaseSpecifier" xml:space="preserve">
    <value>Phase name not registered: {0}</value>
    <comment>0 = Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorIRMergingNotYetSupported" xml:space="preserve">
    <value>IR Merging Not Yet Supported: {0}</value>
    <comment>0 = Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorMessageEngineNameDuplicate" xml:space="preserve">
    <value>A duplicate MessageEngine name already exists: {0}</value>
    <comment>0 = Message Engine Name</comment>
  </data>
  <data name="ErrorPhaseInputIRListEmpty" xml:space="preserve">
    <value>IR List supplied to workflow phase was empty: {0}</value>
    <comment>0 = Workflow Unique Phase Name</comment>
  </data>
  <data name="ErrorPhaseLacksSpecifiedConstructor" xml:space="preserve">
    <value>Specified constructor not found in phase: {0}.  Remember that all Phase constructors must accept a string parameter for WorkflowUniqueName.</value>
    <comment>0 = Phase Type Name</comment>
  </data>
  <data name="ErrorPhaseWorkflowIncorrectInputIRType" xml:space="preserve">
    <value>The wrong IR Type ({0}) was supplied to Phase: {1}</value>
    <comment>0 = Incorrect IR Type, 1 = Phase Friendly Name</comment>
  </data>
  <data name="ErrorRequiredTypeConverterDoesNotExist" xml:space="preserve">
    <value>Required Type Converter Does Not Exist: {0}</value>
    <comment>0 = Type Name</comment>
  </data>
  <data name="ErrorSpecifiedPhaseNameNotFound" xml:space="preserve">
    <value>The specified phase name was not found: {0}</value>
    <comment>0 = Phase Name</comment>
  </data>
  <data name="ErrorWorkflowCycleDetected" xml:space="preserve">
    <value>A cycle was detected in the Phase Workflow graph: {0}</value>
    <comment>0 = Workflow Name</comment>
  </data>
  <data name="WarningMapColumnsDoNotExist" xml:space="preserve">
    <value>Source {0} or Destination {1} does not exist in {2} : {3}</value>
    <comment>0 = sourcename, 1 = destinationName, 2 = transformation name, 3 = ComException.Message</comment>
  </data>
  <data name="WarningMultiplePhaseFriendlyNames" xml:space="preserve">
    <value>The Phase with type {0} has multiple friendly names defined.</value>
    <comment>0 = Phase Type Name</comment>
  </data>
  <data name="WarningXmlValidation" xml:space="preserve">
    <value>XmlValidation Warning: {0} Fragment:{1}</value>
    <comment>0 = Validation Warning Message, 1 =XAttribute Fragment</comment>
  </data>
  <data name="ErrorXmlValidation" xml:space="preserve">
    <value>Xml Validation Error: {0} Fragment: {1}</value>
    <comment>0 = Validation Error Message, 1 = XAttribute Fragment</comment>
  </data>
  <data name="NamespaceSeparator" xml:space="preserve">
    <value>.</value>
    <comment>Separator for namespaces in AST</comment>
  </data>
  <data name="WarningNoPreprocessorFound" xml:space="preserve">
    <value>No Preprocessor found</value>
  </data>
  <data name="VulcanFileNotFound" xml:space="preserve">
    <value>Vulcan File Not Found: {0}</value>
  </data>
  <data name="VulcanStart" xml:space="preserve">
    <value>Welcome to Vulcan Version </value>
  </data>
  <data name="ErrorUnknownDocType" xml:space="preserve">
    <value>Document Type {0} is not supported.</value>
    <comment>0 = XmlIRDocumentType</comment>
  </data>
  <data name="ErrorAttemptedRemoveWorkflowUniquePhaseNameDoesntExist" xml:space="preserve">
    <value>Attempted to remove a phase using a workflow unique phase name that doesn't exist: {0}</value>
    <comment>0 = Workflow Unique Phase Name</comment>
  </data>
</root>